import groovy.json.JsonSlurper

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

group = 'expo.modules.iap'
version = '0.1.0'

def expoModulesCorePlugin = new File(project(":expo-modules-core").projectDir.absolutePath, "ExpoModulesCorePlugin.gradle")
apply from: expoModulesCorePlugin
applyKotlinExpoModulesCorePlugin()
useCoreDependencies()
useExpoPublishing()

def resolveOpenIapVersionsFile() {
  def candidates = [
    new File(projectDir.parentFile, 'openiap-versions.json'),
    new File(rootDir.parentFile ?: rootDir, 'openiap-versions.json'),
    new File(rootProject.projectDir.parentFile ?: rootProject.projectDir, 'openiap-versions.json')
  ]
  return candidates.find { it.exists() }
}

def openiapVersionsFile = resolveOpenIapVersionsFile()
if (openiapVersionsFile == null) {
  throw new GradleException("expo-iap: Unable to locate openiap-versions.json")
}

def openiapVersions = new JsonSlurper().parse(openiapVersionsFile)
def googleVersion = (openiapVersions instanceof Map) ? openiapVersions.google : null
if (!(googleVersion instanceof String) || !googleVersion.trim()) {
  throw new GradleException("expo-iap: 'google' version missing or invalid in openiap-versions.json")
}
def googleVersionString = googleVersion.trim()

// If you want to use the managed Android SDK versions from expo-modules-core, set this to true.
// The Android SDK versions will be bumped from time to time in SDK releases and may introduce breaking changes in your module code.
// Most of the time, you may like to manage the Android SDK versions yourself.
def useManagedAndroidSdkVersions = false
if (useManagedAndroidSdkVersions) {
  useDefaultAndroidSdkVersions()
} else {
  buildscript {
    // Simple helper that allows the root project to override versions declared by this library.
    ext.safeExtGet = { prop, fallback ->
      rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
    }
  }
  project.android {
    compileSdkVersion safeExtGet("compileSdkVersion", 34)
    defaultConfig {
      minSdkVersion safeExtGet("minSdkVersion", 21)
      targetSdkVersion safeExtGet("targetSdkVersion", 34)
    }
  }
}

android {
  namespace "expo.modules.iap"
  defaultConfig {
    versionCode 1
    versionName "0.1.0"
    // When using local openiap-google with flavors, select the appropriate flavor
    // Read horizonEnabled from gradle.properties, default to play
    def horizonEnabled = project.findProperty('horizonEnabled')?.toBoolean() ?: false
    def flavor = horizonEnabled ? 'horizon' : 'play'
    missingDimensionStrategy "platform", flavor
  }
  lintOptions {
    abortOnError false
  }
  kotlinOptions {
    jvmTarget = "17"
    freeCompilerArgs += ["-Xskip-metadata-version-check"]
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_17
    targetCompatibility JavaVersion.VERSION_17
  }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7"

    // Determine which OpenIAP dependency to use based on horizonEnabled flag
    def horizonEnabled = project.findProperty('horizonEnabled')?.toBoolean() ?: false

    // Use OpenIAP Google module only; avoid direct BillingClient dependency
    if (findProject(":openiap-google") != null) {
      implementation project(":openiap-google")
    } else if (horizonEnabled) {
      // Use openiap-google-horizon for Meta Quest when horizonEnabled is true
      implementation "io.github.hyochan.openiap:openiap-google-horizon:${googleVersionString}"
    } else {
      // Fallback to published artifact when local project isn't linked
      implementation "io.github.hyochan.openiap:openiap-google:${googleVersionString}"
    }
}
