"use strict";(globalThis.webpackChunkexpo_iap_docs=globalThis.webpackChunkexpo_iap_docs||[]).push([[4037],{9117:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"3.1.22","metadata":{"permalink":"/expo-iap/blog/3.1.22","editUrl":"https://github.com/hyochan/expo-iap/tree/main/docs/blog/2025-10-28-3.1.22-horizon-os.md","source":"@site/blog/2025-10-28-3.1.22-horizon-os.md","title":"3.1.22 - Horizon OS Support","description":"Horizon OS Support","date":"2025-10-28T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/expo-iap/blog/tags/release","description":"New version releases and updates"},{"inline":true,"label":"horizon-os","permalink":"/expo-iap/blog/tags/horizon-os"},{"inline":false,"label":"Android","permalink":"/expo-iap/blog/tags/android","description":"Android platform specific features"},{"inline":true,"label":"meta-quest","permalink":"/expo-iap/blog/tags/meta-quest"},{"inline":true,"label":"vr","permalink":"/expo-iap/blog/tags/vr"}],"readingTime":1.72,"hasTruncateMarker":true,"authors":[{"name":"Hyo","title":"Expo IAP Maintainer","url":"https://github.com/hyochan","page":{"permalink":"/expo-iap/blog/authors/hyochan"},"socials":{"github":"https://github.com/hyochan","linkedin":"https://www.linkedin.com/in/hyochanjang/","x":"https://x.com/hyodotdev"},"imageURL":"https://github.com/hyochan.png","key":"hyochan"},{"name":"Ram N","title":"Software Engineer at Meta","url":"https://github.com/axe-fb","imageURL":"https://github.com/axe-fb.png","key":"axe-fb","page":null}],"frontMatter":{"slug":"3.1.22","title":"3.1.22 - Horizon OS Support","authors":["hyochan","axe-fb"],"tags":["release","horizon-os","android","meta-quest","vr"],"date":"2025-10-28T00:00:00.000Z"},"unlisted":false,"nextItem":{"title":"3.1.9 - Alternative Billing Support","permalink":"/expo-iap/blog/3.1.9"}},"content":"![Horizon OS Support](/img/horizon-support.png)\\n\\nExpo IAP 3.1.22 introduces **Horizon OS support** for Meta Quest devices, enabling developers to implement in-app purchases in VR applications using the same familiar API.\\n\\nThis release integrates Meta\'s Platform SDK for in-app purchases on Horizon OS, while maintaining the unified [OpenIAP](https://openiap.dev) interface across iOS, Android, and now Horizon OS.\\n\\n\ud83d\udc49 [View the 3.1.22 release](https://github.com/hyochan/expo-iap/releases/tag/3.1.22)\\n\\n\x3c!-- truncate --\x3e\\n\\n## \ud83d\ude80 Highlights\\n\\n### Seamless Horizon OS Integration\\n\\nExpo IAP now supports Meta Quest devices running Horizon OS with **zero code changes** required. Simply enable Horizon mode in your configuration, and your existing purchase code works seamlessly across all platforms.\\n\\n**Key Features**:\\n\\n- \u2705 In-app purchases (consumable and non-consumable)\\n- \u2705 Subscriptions\\n- \u2705 Purchase restoration\\n- \u2705 Product fetching with localized pricing\\n- \u2705 Purchase verification\\n- \u2705 Same API as iOS and Android - no platform-specific code needed\\n\\n### Expo Config Plugin Support\\n\\nThe new Horizon configuration automatically sets up your Android project for Horizon OS:\\n\\n```typescript\\n// app.config.ts\\nexport default {\\n  expo: {\\n    plugins: [\\n      [\\n        \'expo-iap\',\\n        {\\n          modules: {\\n            horizon: true, // Enable Horizon OS support\\n          },\\n          android: {\\n            horizonAppId: \'YOUR_HORIZON_APP_ID\', // Required: Your Horizon App ID\\n          },\\n        },\\n      ],\\n    ],\\n  },\\n};\\n```\\n\\nFor detailed setup instructions, see the [Horizon OS Setup Guide](/docs/getting-started/setup-horizon).\\n\\nThe plugin automatically:\\n\\n- Sets `horizonEnabled=true` in `gradle.properties`\\n- Uses `openiap-google-horizon` artifact instead of `openiap-google`\\n- Adds Horizon Platform SDK and Billing SDK dependencies\\n- Configures your app with the Horizon App ID metadata\\n\\n## \ud83d\udce6 Getting Started\\n\\nTo get started with Horizon OS integration:\\n\\n1. **Install expo-iap 3.1.22 or later**:\\n\\n   ```bash\\n   bun add expo-iap@3.1.22\\n   # or\\n   npm install expo-iap@3.1.22\\n   # or\\n   yarn add expo-iap@3.1.22\\n   ```\\n\\n2. **Follow the setup guide**: See the [Horizon OS Setup Guide](/docs/getting-started/setup-horizon) for detailed instructions on configuration, testing, and troubleshooting.\\n\\n**No Breaking Changes**: All changes are additive. Existing apps will continue to work without modifications. Horizon support is opt-in via configuration.\\n\\n## \ud83d\udd17 References\\n\\n- [Horizon OS Setup Guide](/docs/getting-started/setup-horizon)\\n- [OpenIAP Documentation](https://openiap.dev)\\n- [Meta Quest Developer Hub](https://developer.oculus.com/)\\n\\nQuestions or issues? Let us know via [GitHub issues](https://github.com/hyochan/expo-iap/issues)."},{"id":"3.1.9","metadata":{"permalink":"/expo-iap/blog/3.1.9","editUrl":"https://github.com/hyochan/expo-iap/tree/main/docs/blog/2025-10-04-3.1.9.md","source":"@site/blog/2025-10-04-3.1.9.md","title":"3.1.9 - Alternative Billing Support","description":"Expo IAP 3.1.9 introduces Alternative Billing support for both iOS and Android platforms, enabling developers to offer external payment options in compliance with App Store and Google Play requirements.","date":"2025-10-04T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/expo-iap/blog/tags/release","description":"New version releases and updates"},{"inline":true,"label":"alternative-billing","permalink":"/expo-iap/blog/tags/alternative-billing"},{"inline":false,"label":"iOS","permalink":"/expo-iap/blog/tags/ios","description":"iOS platform specific features"},{"inline":false,"label":"Android","permalink":"/expo-iap/blog/tags/android","description":"Android platform specific features"},{"inline":true,"label":"storekit","permalink":"/expo-iap/blog/tags/storekit"}],"readingTime":4.6,"hasTruncateMarker":true,"authors":[{"name":"Hyo","title":"Expo IAP Maintainer","url":"https://github.com/hyochan","page":{"permalink":"/expo-iap/blog/authors/hyochan"},"socials":{"github":"https://github.com/hyochan","linkedin":"https://www.linkedin.com/in/hyochanjang/","x":"https://x.com/hyodotdev"},"imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"3.1.9","title":"3.1.9 - Alternative Billing Support","authors":["hyochan"],"tags":["release","alternative-billing","ios","android","storekit"],"date":"2025-10-04T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"3.1.22 - Horizon OS Support","permalink":"/expo-iap/blog/3.1.22"},"nextItem":{"title":"3.1.0 - Full OpenIAP Ecosystem Adoption","permalink":"/expo-iap/blog/3.1.0"}},"content":"Expo IAP 3.1.9 introduces **Alternative Billing** support for both iOS and Android platforms, enabling developers to offer external payment options in compliance with App Store and Google Play requirements.\\n\\nThis release integrates StoreKit External Purchase APIs (iOS 16.0+) and Google Play Alternative Billing APIs, providing a unified interface for alternative payment flows across platforms.\\n\\n\ud83d\udc49 [View the 3.1.9 release](https://github.com/hyochan/expo-iap/releases/tag/3.1.9)\\n\\n\x3c!-- truncate --\x3e\\n\\n## \ud83d\ude80 Highlights\\n\\n### iOS Alternative Billing (StoreKit External Purchase)\\n\\nThree new APIs for managing external purchases on iOS:\\n\\n- **[`canPresentExternalPurchaseNoticeIOS()`](/docs/api/methods/core-methods#canpresentexternalpurchasenoticeios)** - Check if the notice sheet is available (iOS 18.2+)\\n- **[`presentExternalPurchaseNoticeSheetIOS()`](/docs/api/methods/core-methods#presentexternalpurchasenoticesheetios)** - Present a notice before redirecting to external purchase (iOS 18.2+)\\n- **[`presentExternalPurchaseLinkIOS(url)`](/docs/api/methods/core-methods#presentexternalpurchaselinkios)** - Open external purchase link in Safari (iOS 16.0+)\\n\\n**Expo Config Plugin Support**: The new `iosAlternativeBilling` configuration automatically sets up required Info.plist keys and entitlements:\\n\\n```typescript\\n// app.config.ts\\nexport default {\\n  plugins: [\\n    [\\n      \'expo-iap\',\\n      {\\n        iosAlternativeBilling: {\\n          countries: [\'kr\', \'nl\'], // ISO 3166-1 alpha-2\\n          links: {\\n            kr: \'https://your-site.com/kr\',\\n            nl: \'https://your-site.com/nl\',\\n          },\\n          enableExternalPurchaseLink: true,\\n        },\\n      },\\n    ],\\n  ],\\n};\\n```\\n\\nThe plugin handles:\\n\\n- `SKExternalPurchase` - Country codes where external purchases are supported\\n- `SKExternalPurchaseLink` - External purchase URLs per country (iOS 15.4+)\\n- `SKExternalPurchaseMultiLink` - Multiple URLs per country (iOS 17.5+)\\n- `SKExternalPurchaseCustomLinkRegions` - Custom link regions (iOS 18.1+)\\n- `SKExternalPurchaseLinkStreamingRegions` - Streaming regions for music apps (iOS 18.2+)\\n- StoreKit entitlements: `com.apple.developer.storekit.external-purchase*`\\n\\n### Android Alternative Billing\\n\\nThree new APIs for Google Play Alternative Billing flow:\\n\\n- **[`checkAlternativeBillingAvailabilityAndroid()`](/docs/api/methods/core-methods#checkalternativebillingavailabilityandroid)** - Check if alternative billing is available for the user\\n- **[`showAlternativeBillingDialogAndroid()`](/docs/api/methods/core-methods#showalternativebillingdialogandroid)** - Show Google\'s required information dialog\\n- **[`createAlternativeBillingTokenAndroid(sku)`](/docs/api/methods/core-methods#createalternativebillingtokenandroid)** - Generate reporting token after successful payment\\n\\n**Configuration Support**: `initConnection()` now accepts an optional config parameter:\\n\\n```typescript\\nimport {initConnection} from \'expo-iap\';\\n\\n// Initialize with alternative billing mode\\nawait initConnection({\\n  alternativeBillingModeAndroid: \'user-choice\', // or \'alternative-only\'\\n});\\n```\\n\\n**Two Billing Modes**:\\n\\n- `user-choice` - Users choose between Google Play billing (30% fee) or your payment system (lower fee)\\n- `alternative-only` - Only your payment system is available (Google Play billing disabled)\\n\\n## \ud83d\udcda Usage Examples\\n\\n### iOS External Purchase\\n\\n```typescript\\nimport {presentExternalPurchaseLinkIOS} from \'expo-iap\';\\n\\n// Redirect user to external purchase website\\nconst result = await presentExternalPurchaseLinkIOS(\\n  \'https://your-site.com/checkout\',\\n);\\n\\nif (result.success) {\\n  console.log(\'User redirected to external website\');\\n}\\n```\\n\\n### Android Alternative Billing\\n\\n**User Choice Mode** - When using `user-choice` mode, listen for user selection with **[`userChoiceBillingListenerAndroid()`](/docs/api/methods/listeners#userchoicebillinglistenerandroid)**:\\n\\n```typescript\\nimport {initConnection, userChoiceBillingListenerAndroid} from \'expo-iap\';\\n\\n// Initialize with user-choice mode\\nawait initConnection({\\n  alternativeBillingModeAndroid: \'user-choice\',\\n});\\n\\n// Listen for when user selects alternative billing\\nconst subscription = userChoiceBillingListenerAndroid((details) => {\\n  console.log(\'User selected alternative billing\');\\n  console.log(\'Token:\', details.externalTransactionToken);\\n  console.log(\'Products:\', details.products);\\n\\n  // Process payment in your system, then report token to Google\\n  await processPaymentAndReportToken(details);\\n});\\n\\n// Clean up when done\\nsubscription.remove();\\n```\\n\\n**Alternative Only Mode** - Manual 3-step flow:\\n\\n```typescript\\nimport {\\n  checkAlternativeBillingAvailabilityAndroid,\\n  showAlternativeBillingDialogAndroid,\\n  createAlternativeBillingTokenAndroid,\\n} from \'expo-iap\';\\n\\n// Step 1: Check availability\\nconst isAvailable = await checkAlternativeBillingAvailabilityAndroid();\\n\\n// Step 2: Show Google\'s information dialog\\nconst userAccepted = await showAlternativeBillingDialogAndroid();\\n\\nif (userAccepted) {\\n  // Step 3: Process payment in your system, then create token\\n  const token = await createAlternativeBillingTokenAndroid(productId);\\n\\n  // Step 4: Report token to Google Play backend within 24 hours\\n  await reportTokenToGooglePlay(token);\\n}\\n```\\n\\n## \ud83c\udfa8 Example App\\n\\nA complete alternative billing demo screen has been added to the example app:\\n\\n- **Platform-specific flows** - Demonstrates iOS and Android alternative billing patterns\\n- **Billing mode toggle** (Android) - Switch between `alternative-only` and `user-choice` with auto-reconnect\\n- **External URL input** (iOS) - Configure and test external purchase links\\n- **Real-time results** - View purchase flow status and responses\\n- **Step-by-step guidance** - Visual flow diagrams for both platforms\\n\\nNavigate to `example/app/alternative-billing.tsx` to explore the implementation.\\n\\n## \ud83d\udd27 OpenIAP Upgrades\\n\\n- **openiap-apple** upgraded to **1.2.10** with StoreKit external purchase support\\n- **openiap-google** upgraded to **1.2.12** with alternative billing APIs\\n- **openiap-gql** upgraded to **1.0.12** with updated type definitions\\n\\n## \ud83e\uddea Testing\\n\\nAdded 30+ comprehensive tests for the iOS config plugin:\\n\\n- Info.plist configuration validation\\n- Entitlements setup verification\\n- URL validation and country code checks\\n- Edge case handling\\n\\nAll existing tests continue to pass with 98%+ coverage.\\n\\n## \u26a0\ufe0f Platform Requirements\\n\\n### iOS\\n\\n- **Minimum Version**: iOS 16.0+ for external purchase links, iOS 18.2+ for notice sheet\\n- **App Store Connect**: Must request and receive approval for external purchase entitlements\\n- **Provisioning Profile**: Must include StoreKit external purchase entitlements\\n- See [StoreKit External Purchase documentation](https://developer.apple.com/documentation/storekit/external-purchase)\\n\\n### Android\\n\\n- **Google Play Console**: Must be approved for alternative billing program\\n- **Token Reporting**: Must report tokens to Google within 24 hours\\n- **Backend Integration**: Server-side validation and reporting required\\n- See [Google Play Alternative Billing documentation](https://developer.android.com/google/play/billing/alternative)\\n\\n## \ud83d\udce6 Installation\\n\\n```bash\\nbun add expo-iap@3.1.9\\n# or\\nnpm install expo-iap@3.1.9\\n# or\\nyarn add expo-iap@3.1.9\\n```\\n\\nAfter installation, run prebuild to apply iOS config plugin changes:\\n\\n```bash\\nnpx expo prebuild --clean\\n```\\n\\n## \ud83d\udea8 Important Notes\\n\\n### For iOS Developers\\n\\nAlternative billing on iOS requires explicit approval from Apple. During development:\\n\\n1. Keep `iosAlternativeBilling` commented out in your config\\n2. Test regular IAP flows without entitlements\\n3. When ready for production, uncomment the config and follow Apple\'s approval process\\n\\n### For Android Developers\\n\\nAlternative billing on Android requires:\\n\\n1. Approval from Google Play Console\\n2. Backend integration to report tokens within 24 hours\\n3. Proper error handling for users not eligible for alternative billing\\n\\n**No Breaking Changes**: All changes are additive. Existing apps will continue to work without modifications.\\n\\n## \ud83d\udd17 References\\n\\n- [OpenIAP Documentation](https://openiap.dev)\\n- [StoreKit External Purchase](https://developer.apple.com/documentation/storekit/external-purchase)\\n- [Google Play Alternative Billing](https://developer.android.com/google/play/billing/alternative)\\n- [Example Implementation](https://github.com/hyochan/expo-iap/blob/main/example/app/alternative-billing.tsx)\\n\\nQuestions or issues? Let us know via [GitHub issues](https://github.com/hyochan/expo-iap/issues)."},{"id":"3.1.0","metadata":{"permalink":"/expo-iap/blog/3.1.0","editUrl":"https://github.com/hyochan/expo-iap/tree/main/docs/blog/2025-09-21-3.1.0.md","source":"@site/blog/2025-09-21-3.1.0.md","title":"3.1.0 - Full OpenIAP Ecosystem Adoption","description":"Expo IAP 3.1.0 graduates the project into the full OpenIAP ecosystem. The release ships with three dedicated native stacks:","date":"2025-09-21T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/expo-iap/blog/tags/release","description":"New version releases and updates"},{"inline":false,"label":"OpenIAP","permalink":"/expo-iap/blog/tags/openiap","description":"OpenIAP related notes"},{"inline":false,"label":"iOS","permalink":"/expo-iap/blog/tags/ios","description":"iOS platform specific features"},{"inline":false,"label":"Android","permalink":"/expo-iap/blog/tags/android","description":"Android platform specific features"},{"inline":false,"label":"Tooling","permalink":"/expo-iap/blog/tags/tooling","description":"Tooling and build pipeline updates"}],"readingTime":3.04,"hasTruncateMarker":true,"authors":[{"name":"Hyo","title":"Expo IAP Maintainer","url":"https://github.com/hyochan","page":{"permalink":"/expo-iap/blog/authors/hyochan"},"socials":{"github":"https://github.com/hyochan","linkedin":"https://www.linkedin.com/in/hyochanjang/","x":"https://x.com/hyodotdev"},"imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"3.1.0","title":"3.1.0 - Full OpenIAP Ecosystem Adoption","authors":["hyochan"],"tags":["release","openiap","ios","android","tooling"],"date":"2025-09-21T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"3.1.9 - Alternative Billing Support","permalink":"/expo-iap/blog/3.1.9"},"nextItem":{"title":"3.0.0 \u2014 OpenIAP Integration, Unified Core, Leaner API","permalink":"/expo-iap/blog/3.0.0"}},"content":"Expo IAP 3.1.0 graduates the project into the full **OpenIAP ecosystem**. The release ships with three dedicated native stacks:\\n\\n- **[openiap-apple](https://github.com/hyodotdev/openiap-apple)** \u2014 StoreKit 2 implementation for Apple platforms\\n- **[openiap-google](https://github.com/hyodotdev/openiap-google)** \u2014 Google Play Billing integration for Android\\n- **[openiap-gql](https://github.com/hyodotdev/openiap-gql)** \u2014 GraphQL helpers that drive types and tooling\\n\\nFrom 3.1.0 onward, Expo IAP stays in lockstep with these modules: Apple **v1.2.2**, Google **v1.2.6**, and GQL **v1.0.8**. That shared version alignment gives Expo IAP stable native compatibility and a unified type system straight from the OpenIAP schema.\\n\\n\ud83d\udc49 [View the 3.1.0 release](https://github.com/hyochan/expo-iap/releases/tag/3.1.0)\\n\\n\x3c!-- truncate --\x3e\\n\\n## \ud83d\ude80 Highlights\\n\\n- Adopted the full OpenIAP core stack\u2014[openiap-gql](https://github.com/hyodotdev/openiap-gql), [openiap-apple](https://github.com/hyodotdev/openiap-apple) v1.2.2, and [openiap-google](https://github.com/hyodotdev/openiap-google) v1.2.6)\u2014bringing Expo IAP into alignment with the shared ecosystem used across Flutter, React Native, and KMP.\\n- Trimmed roughly **two thirds** of our custom native bridge code by delegating logic to the OpenIAP modules.\\n- Expanded automated coverage to about **98%**, spanning purchase flows, native bridge entry points, and error mapping utilities.\\n\\n## \ud83d\udd01 OpenIAP Upgrades\\n\\n- Normalized purchase payloads on both platforms so every bridge call sanitizes platform casing and forwards the complete OpenIAP record.\\n- Migrated Android to the new `RequestPurchaseProps` / `PurchaseResult` / `ErrorCode` contracts, achieving parity with the Apple module.\\n- Centralized native dependency versions via [`openiap-versions.json`](https://github.com/hyochan/expo-iap/blob/main/openiap-versions.json); Gradle now fails fast if the Google artifact version is missing and scripts/migrations read from one source of truth.\\n\\n## \ud83d\udc1e Bug Fixes\\n\\n- `fix(android): honor subscription offerToken` ([#214](https://github.com/hyochan/expo-iap/pull/214)) restores proper handling of `subscriptionOfferDetailsAndroid` so Google Play discounts apply reliably.\\n\\n## \ud83d\udee1\ufe0f Safer Purchases & Better Errors\\n\\n- `requestPurchase` on iOS explicitly rejects unsupported product types instead of silently treating `all` as `in-app`.\\n- Error handling now consistently routes through the shared `ErrorCode` table so promise rejections, platform conversions, and predicates remain aligned.\\n- Additional coverage for `createPurchaseError`, `ErrorCodeUtils`, and the user-friendly error helper keeps error copy in sync with OpenIAP terminology.\\n\\n## \ud83d\udee0\ufe0f Tooling & Workflow\\n\\n- Contributor docs clarify how to bump OpenIAP packages, regenerate types, and keep `openiap-versions.json` synchronized for Android and iOS builds.\\n\\n## \u26a0\ufe0f Important Changes\\n\\n- **Transaction identifiers**: `transactionId` is reinstated as the primary store reference (`orderId` on Android, StoreKit transaction ID on iOS). Android\u2019s generic `id` is no longer repurposed for orders; when Google Play omits an `orderId` (typical for consumables), `transactionId` becomes `null` and clients should rely on the unified `purchaseToken` (Android purchase token / iOS JWS). This value is the canonical receipt for server validation. See the related [react-native-iap discussion](https://github.com/hyochan/react-native-iap/discussions/3016).\\n- **iOS request types**: purchase requests must specify either `in-app` or `subs`. Passing `all` (or any other type) throws an explicit error.\\n- **Promoted products**: events now emit the full sanitized product payload; downstream listeners should expect the entire object instead of just `productId`.\\n- **Deprecated helpers removed**: `getProducts`, `requestSubscription`, and `requestProducts` are removed. Use `fetchProducts` with the unified purchase flow.\\n\\n## Minor Updates\\n\\n- Removed the legacy `useIAP` state shims (`currentPurchase`, `currentPurchaseError`, and their `clear*` helpers) in favour of the hook\u2019s `onPurchaseSuccess` / `onPurchaseError` callbacks ([#213](https://github.com/hyochan/expo-iap/pull/213)).\\n\\n## \ud83d\udce6 Installation\\n\\n```bash\\nbun add expo-iap@3.1.0\\n# or\\nnpm install expo-iap@3.1.0\\n# or\\nyarn add expo-iap@3.1.0\\n```\\n\\n## \ud83d\udd17 References\\n\\n- Recent work: [Closed pull requests](https://github.com/hyochan/expo-iap/pulls?q=is%3Apr+is%3Aclosed)\\n- Release builds on the OpenIAP ecosystem: [openiap.dev](https://openiap.dev)\\n\\nEnjoy the smoother upgrade path and richer diagnostics shipped in 3.1.0! Let us know how it goes via [GitHub issues](https://github.com/hyochan/expo-iap/issues)."},{"id":"3.0.0","metadata":{"permalink":"/expo-iap/blog/3.0.0","editUrl":"https://github.com/hyochan/expo-iap/tree/main/docs/blog/2025-09-13-3.0.0.md","source":"@site/blog/2025-09-13-3.0.0.md","title":"3.0.0 \u2014 OpenIAP Integration, Unified Core, Leaner API","description":"Expo IAP 3.0.0 is a major release that fully integrates OpenIAP\u2019s Android and iOS modules. Expo IAP is no longer just a framework bridge \u2014 it now leverages a centralized OpenIAP core for shared logic across platforms and SDKs. The result is a leaner, more maintainable codebase with faster iteration and greater stability.","date":"2025-09-13T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/expo-iap/blog/tags/release","description":"New version releases and updates"},{"inline":false,"label":"Breaking Change","permalink":"/expo-iap/blog/tags/breaking-change","description":"Breaking changes requiring code updates"},{"inline":false,"label":"Android","permalink":"/expo-iap/blog/tags/android","description":"Android platform specific features"},{"inline":false,"label":"iOS","permalink":"/expo-iap/blog/tags/ios","description":"iOS platform specific features"}],"readingTime":4.26,"hasTruncateMarker":true,"authors":[{"name":"Hyo","title":"Expo IAP Maintainer","url":"https://github.com/hyochan","page":{"permalink":"/expo-iap/blog/authors/hyochan"},"socials":{"github":"https://github.com/hyochan","linkedin":"https://www.linkedin.com/in/hyochanjang/","x":"https://x.com/hyodotdev"},"imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"3.0.0","title":"3.0.0 \u2014 OpenIAP Integration, Unified Core, Leaner API","tags":["release","breaking-change","android","ios"],"authors":["hyochan"],"date":"2025-09-13T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"3.1.0 - Full OpenIAP Ecosystem Adoption","permalink":"/expo-iap/blog/3.1.0"},"nextItem":{"title":"2.9.0 - OpenIAP Apple Integration","permalink":"/expo-iap/blog/2.9.0"}},"content":"Expo IAP 3.0.0 is a major release that fully integrates [OpenIAP](https://openiap.dev)\u2019s Android and iOS modules. Expo IAP is no longer just a framework bridge \u2014 it now leverages a centralized [OpenIAP](https://openiap.dev) core for shared logic across platforms and SDKs. The result is a leaner, more maintainable codebase with faster iteration and greater stability.\\n\\n\x3c!-- truncate --\x3e\\n\\nimport AdFitTopFixed from \\"@site/src/uis/AdFitTopFixed\\";\\n\\n<AdFitTopFixed />\\n\\n## \ud83d\ude80 Highlights\\n\\n- Unified tokens: `Purchase.purchaseToken` is now the single source on both platforms (iOS JWS or Android token). The old `jwsRepresentationIOS` is removed.\\n- Leaner API: Legacy helpers are removed. Use `fetchProducts`, `requestPurchase`, `getAvailablePurchases`, and listeners.\\n- iOS parity: Only `*IOS` helpers remain for iOS\u2011specific behavior. `showManageSubscriptionsIOS()` now returns an array of purchases instead of a boolean.\\n- Stronger types: Consolidated product/purchase types; removed legacy aliases and fields for clarity.\\n- OpenIAP everywhere: Android uses openiap-google and iOS uses openiap-apple. Shared, centralized logic simplifies maintenance and keeps frameworks in sync.\\n\\n## \ud83d\udd0d Key Changes\\n\\n\u2705 Full Integration Across Client Platforms (Android \xb7 iOS) Platform\u2011specific IAP logic has been unified into OpenIAP modules, minimizing fragmentation across ecosystems.\\n\\n\u2705 Lean Codebase (~75% reduction) Overall code size has been significantly reduced, lowering complexity and maintenance costs.\\n\\n\u2705 Centralized Core Architecture Common logic lives in the core library, enabling consistent behavior and faster feature expansion across frameworks.\\n\\n\u2705 Improved Stability & Maintainability Bug fixes and features land once in the core, eliminating duplication and improving reliability.\\n\\n## \ud83d\udca5 Breaking Changes\\n\\n- Removed fields\\n\\n  - Removed `transactionReceipt` (use `purchaseToken` on all platforms). On iOS, `purchaseToken` contains the JWS representation previously accessed via receipts.\\n  - Removed `jwsRepresentationIOS` in favor of the unified `purchaseToken`.\\n\\n- Removed functions\\n\\n  - `getProducts`, `getSubscriptions`, `requestProducts`, `requestSubscription`\\n  - `getPurchaseHistory` / `getPurchaseHistories`\\n  - Non\u2011suffixed iOS aliases (use `*IOS` variants)\\n\\n- Changed behavior\\n  - `showManageSubscriptionsIOS(): Promise<Purchase[]>` \u2014 now returns purchases instead of `boolean`.\\n  - `getAvailablePurchases` options: only accepts `alsoPublishToEventListenerIOS` and `onlyIncludeActiveItemsIOS`.\\n\\n## \ud83d\udccb Recent Patch Releases (v2.9.x)\\n\\nBefore the major 3.0.0 release, several patch versions improved stability and fixed issues:\\n\\n### v2.9.7 \u2014 Android/iOS improvements and subscription offer tokens\\n\\n- Android: Removed ensureConnection wrapper, added pre-checks, and dropped deprecated product fields (use `nameAndroid`, `oneTimePurchaseOfferDetailsAndroid`, `subscriptionOfferDetailsAndroid`).\\n- iOS: Added ensureConnection() guard across public APIs; fixed main-actor state mutation and minor warnings.\\n- **Heads-up for Android subscriptions**: When purchasing subscriptions, pass selected offer tokens via `subscriptionOffers` to build BillingFlowParams correctly. Example provided in the original release notes.\\n\\n### v2.9.6 \u2014 Metro bundling fix\\n\\n- Fixed Metro bundling issue that could crash apps when using `useIAP()` under certain project setups.\\n- Replaced ambiguous import \'.\' with explicit import \'./index\' in the hook implementation.\\n- No runtime behavior changes \u2014 strictly fixes bundling resolution.\\n\\n### v2.9.5 \u2014 Pin openiap and deprecate 2.9.0\u20132.9.4\\n\\n- iOS: Podspec now pins openiap to 1.1.9 to avoid version drift during pod install.\\n- Deprecated 2.9.0\u20132.9.4. Please upgrade to 2.9.5.\\n- Upgrade notes: Run `npx expo prebuild -p ios` and `pod install` after updating.\\n\\n### v2.9.3 \u2014 iOS error fixes and CocoaPods hardening\\n\\n- iOS: Replaced thrown OpenIapError.\\\\* usages and nonexistent event types with proper OpenIapFailure cases.\\n- iOS: Relied on type inference for error event listener to avoid missing type symbols.\\n- Plugin(iOS): Ensured Podfile includes GitHub Specs before CDN and added stability envs to reduce CDN HTTP/2 flakiness.\\n- Plugin(iOS): Applied the same improvements when injecting a local openiap pod for development.\\n\\n### v2.9.1 \u2014 iOS fixes and error improvements\\n\\n- iOS: `getPromotedProductIOS` now returns a full serialized Product; `subscriptionStatusIOS` returns `{ state, renewalInfo? }` with a real boolean `willAutoRenew`.\\n- Errors: Expanded codes + friendlier messages; support object-style `new PurchaseError({ ... })` (positional args still work).\\n- Docs: Docusaurus supports GitHub Pages via dynamic baseUrl; added conventions for PurchaseError construction.\\n- Example iOS: Pinned openiap to 1.1.7 from git to avoid trunk lag.\\n\\n## Quick Migration\\n\\n### Fetch products (in\u2011app or subs)\\n\\n```ts\\nimport {fetchProducts, type ProductSubscription} from \'expo-iap\';\\n\\nconst inapps = await fetchProducts({skus: [\'prod1\', \'prod2\'], type: \'in-app\'});\\n\\nconst subs = (await fetchProducts({\\n  skus: [\'sub_monthly\'],\\n  type: \'subs\',\\n})) as ProductSubscription[];\\n```\\n\\n### Request purchase (products or subs)\\n\\n```ts\\nimport {requestPurchase} from \'expo-iap\';\\n\\n// In\u2011app\\nawait requestPurchase({\\n  request: {ios: {sku: \'prod1\'}, android: {skus: [\'prod1\']}},\\n  type: \'in-app\',\\n});\\n\\n// Subscriptions (Android supply offer tokens)\\nawait requestPurchase({\\n  request: {\\n    ios: {sku: \'sub_monthly\'},\\n    android: {\\n      skus: [\'sub_monthly\'],\\n      subscriptionOffers: [\\n        {sku: \'sub_monthly\', offerToken: \'your-offer-token\'},\\n      ],\\n    },\\n  },\\n  type: \'subs\',\\n});\\n```\\n\\n### Restore/available purchases\\n\\n```ts\\nimport {getAvailablePurchases, restorePurchases} from \'expo-iap\';\\n\\n// iOS\u2011specific flags only\\nconst purchases = await getAvailablePurchases({\\n  alsoPublishToEventListenerIOS: false,\\n  onlyIncludeActiveItemsIOS: true,\\n});\\n\\n// Cross\u2011platform helper that syncs on iOS then lists\\nconst restored = await restorePurchases({\\n  alsoPublishToEventListenerIOS: false,\\n  onlyIncludeActiveItemsIOS: true,\\n});\\n```\\n\\n### Tokens and finishing transactions\\n\\n```ts\\nimport {finishTransaction, type Purchase} from \'expo-iap\';\\n\\nfunction getToken(p: Purchase) {\\n  return p.purchaseToken; // iOS: JWS, Android: purchaseToken\\n}\\n\\nawait finishTransaction({purchase: somePurchase, isConsumable: true});\\n```\\n\\n## Notes\\n\\n- iOS promoted products listener remains `promotedProductListenerIOS`.\\n- `getStorefront()` is now the unified storefront helper across platforms.\\n\\n## Changelog\\n\\nSee `CHANGELOG.md` for the full list of changes in 3.0.0.\\n\\n## \ud83d\udd17 Repositories to Explore\\n\\n- [openiap-apple](https://github.com/hyodotdev/openiap-apple) (iOS)\\n- [openiap-google](https://github.com/hyodotdev/openiap-google) (Android)\\n\\nThe OpenIAP core library is where the shared logic and architecture live \u2014 the foundation for review, extensibility, and cross\u2011SDK consistency.\\n\\n## \ud83c\udf1f Why This Matters\\n\\n- Standardizes the IAP experience across frameworks, improving trust for both developers and users\\n- Speeds up responses to platform\u2011specific issues (fix once at the core)\\n- Reduces risk and shortens release cycles via a smaller codebase and broader test coverage\\n\\nFollow for faster updates: [@hyodotdev](https://x.com/hyodotdev)"},{"id":"2.9.0","metadata":{"permalink":"/expo-iap/blog/2.9.0","editUrl":"https://github.com/hyochan/expo-iap/tree/main/docs/blog/2025-09-05-2.9.0.md","source":"@site/blog/2025-09-05-2.9.0.md","title":"2.9.0 - OpenIAP Apple Integration","description":"We\'re excited to announce 2.9.0, featuring full integration with OpenIAP Apple that reduces our Swift codebase by ~1,180 lines (73% reduction)!","date":"2025-09-05T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/expo-iap/blog/tags/release","description":"New version releases and updates"},{"inline":false,"label":"OpenIAP","permalink":"/expo-iap/blog/tags/openiap","description":"OpenIAP related notes"},{"inline":false,"label":"iOS","permalink":"/expo-iap/blog/tags/ios","description":"iOS platform specific features"},{"inline":false,"label":"Architecture","permalink":"/expo-iap/blog/tags/architecture","description":"Architecture notes and updates"},{"inline":false,"label":"Performance","permalink":"/expo-iap/blog/tags/performance","description":"Performance improvements"}],"readingTime":2.32,"hasTruncateMarker":true,"authors":[{"name":"Hyo","title":"Expo IAP Maintainer","url":"https://github.com/hyochan","page":{"permalink":"/expo-iap/blog/authors/hyochan"},"socials":{"github":"https://github.com/hyochan","linkedin":"https://www.linkedin.com/in/hyochanjang/","x":"https://x.com/hyodotdev"},"imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"2.9.0","title":"2.9.0 - OpenIAP Apple Integration","authors":["hyochan"],"tags":["release","openiap","ios","architecture","performance"],"date":"2025-09-05T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"3.0.0 \u2014 OpenIAP Integration, Unified Core, Leaner API","permalink":"/expo-iap/blog/3.0.0"},"nextItem":{"title":"2.8.0 Migration Guide - iOS Field Naming Convention Update","permalink":"/expo-iap/blog/2.8.0-migration-guide"}},"content":"We\'re excited to announce 2.9.0, featuring full integration with OpenIAP Apple that reduces our Swift codebase by **~1,180 lines (73% reduction)**!\\n\\n\x3c!-- truncate --\x3e\\n\\nimport AdFitTopFixed from \\"@site/src/uis/AdFitTopFixed\\";\\n\\n<AdFitTopFixed />\\n\\n## \ud83c\udfaf OpenIAP Apple Integration\\n\\nThe core achievement of this release is integrating [OpenIAP Apple](https://github.com/hyodotdev/openiap-apple) v1.1.5 as our iOS native module.\\n\\n### Code Reduction Impact\\n\\n- **Before**: 1,620 lines of Swift code\\n- **After**: 440 lines of Swift code\\n- **Reduction**: ~1,180 lines (73% less code to maintain!)\\n\\n## \ud83c\udfd7\ufe0f Architecture Evolution\\n\\n### Before (2.8.x)\\n\\n```txt\\nExpo IAP \u2192 Custom Swift Implementation \u2192 StoreKit 2\\n         (1,620 lines of complex logic)\\n```\\n\\n### After (2.9.0)\\n\\n```txt\\nExpo IAP \u2192 OpenIAP Apple \u2192 StoreKit 2\\n         (440 lines)    (Specialized native module)\\n```\\n\\n## \u2728 What\'s New\\n\\n### Enhanced Type System\\n\\nFollowing [OpenIAP v1.1.0 specification](https://www.openiap.dev/docs/versions#v1-1-0):\\n\\n- `ProductRequest` for product fetching\\n- `RequestPurchaseProps` for purchase requests\\n- `ReceiptValidationProps` for receipt validation\\n- `PurchaseError` with native error code mapping\\n- No more deep imports: `ProductAndroid`, `ProductIOS`, `PaymentDiscount` and other types are exported from `expo-iap` root\\n\\n### Thread Safety\\n\\n- All iOS operations now use `@MainActor` annotation\\n- Prevents race conditions and ensures main thread execution\\n\\n### Unified Event System\\n\\n- Renamed `IapEvent` to `OpenIapEvent`\\n- Streamlined listeners: `purchaseUpdatedListener`, `purchaseErrorListener`\\n- Added `removeAllListeners()` for cleanup\\n\\n## \ud83d\udc1b Bug Fixes\\n\\n- Fixed duplicate purchase success alerts\\n- Resolved restore purchase alerts on screen entry\\n- Improved purchase validation logic\\n- Enhanced subscription status refresh timing\\n- Better deduplication of purchases by productId\\n\\n## \ud83d\udc94 Breaking Changes\\n\\n### IapEvent \u2192 OpenIapEvent\\n\\n```typescript\\n// \u274c Old\\nimport {OpenIapEvent} from \'expo-iap\';\\n\\npurchaseUpdatedListener((purchase) => {}, OpenIapEvent.PurchaseUpdated);\\n\\n// \u2705 New\\nimport {OpenIapEvent} from \'expo-iap\';\\n\\npurchaseUpdatedListener((purchase) => {}, OpenIapEvent.PurchaseUpdated);\\n```\\n\\n## \ud83d\ude80 Looking Ahead: 3.0.0\\n\\nThis release sets the foundation for 3.0.0:\\n\\n- **Android**: OpenIAP Android integration (Google Play Billing)\\n- **Bundle Size**: Further optimizations through shared native libraries\\n- **Maintenance**: Unified native module architecture\\n\\n## \ud83d\udca1 Benefits\\n\\n1. **Reliability**: Battle-tested native modules reduce edge cases\\n2. **Maintainability**: 73% less code in Expo IAP layer\\n3. **Performance**: Optimized native implementations\\n4. **Future-proof**: Easier platform updates\\n\\n## \ud83d\udce6 Installation\\n\\n```bash\\nnpm install expo-iap@2.9.0\\n# or\\nyarn add expo-iap@2.9.0\\n# or\\nbun add expo-iap@2.9.0\\n```\\n\\n## \ud83d\udccb Full Changelog\\n\\n### Added\\n\\n- **iOS**: Integrated OpenIAP Apple v1.1.6\\n- Updated types to match OpenIAP v1.1.0 specification\\n- Enhanced error handling with `PurchaseError` type\\n- New type system: `ProductRequest`, `RequestPurchaseProps`, `ReceiptValidationProps`\\n- Improved receipt validation with `ReceiptValidationResult`\\n\\n### Changed\\n\\n- Updated `serializePurchase` and `serializeProduct` for new OpenIAP structure\\n- Updated listener setup to use new OpenIAP methods\\n- Renamed `IapEvent` to `OpenIapEvent` across entire codebase\\n- Added unified `removeAllListeners()` for cleanup\\n- Avoid deep imports: import public types directly from `expo-iap`\\n\\n### Fixed\\n\\n- Fixed duplicate purchase success alerts\\n- Fixed restore purchase alerts on screen entry\\n- Improved purchase validation logic\\n- Enhanced subscription deduplication\\n\\n### Note\\n\\n- Android native module integration with OpenIAP Android planned for 3.0.0\\n\\n## \ud83d\ude4f Acknowledgments\\n\\nSpecial thanks to the [OpenIAP](https://www.openiap.dev) project for providing standardized, high-quality native modules.\\n\\nFor detailed changes, see [PR #184](https://github.com/hyochan/expo-iap/pull/184).\\n\\nQuestions? Visit [GitHub Issues](https://github.com/hyochan/expo-iap/issues)!"},{"id":"2.8.0-migration-guide","metadata":{"permalink":"/expo-iap/blog/2.8.0-migration-guide","editUrl":"https://github.com/hyochan/expo-iap/tree/main/docs/blog/2025-08-18-2.8.0-migration-guide.md","source":"@site/blog/2025-08-18-2.8.0-migration-guide.md","title":"2.8.0 Migration Guide - iOS Field Naming Convention Update","description":"Breaking Changes","date":"2025-08-18T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/expo-iap/blog/tags/release","description":"New version releases and updates"},{"inline":false,"label":"Breaking Change","permalink":"/expo-iap/blog/tags/breaking-change","description":"Breaking changes requiring code updates"},{"inline":false,"label":"Migration","permalink":"/expo-iap/blog/tags/migration","description":"Migration guides and updates"}],"readingTime":5.01,"hasTruncateMarker":true,"authors":[{"name":"Hyo","title":"Expo IAP Maintainer","url":"https://github.com/hyochan","page":{"permalink":"/expo-iap/blog/authors/hyochan"},"socials":{"github":"https://github.com/hyochan","linkedin":"https://www.linkedin.com/in/hyochanjang/","x":"https://x.com/hyodotdev"},"imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"2.8.0-migration-guide","title":"2.8.0 Migration Guide - iOS Field Naming Convention Update","authors":["hyochan"],"tags":["release","breaking-change","migration"],"date":"2025-08-18T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"2.9.0 - OpenIAP Apple Integration","permalink":"/expo-iap/blog/2.9.0"},"nextItem":{"title":"2.7.0 - New Platform API & Google Play Billing v8","permalink":"/expo-iap/blog/2.7.0"}},"content":"## Breaking Changes\\n\\nVersion 2.8.0 introduces naming convention changes:\\n\\n1. **iOS suffix convention**: Fields with iOS suffixes now use uppercase `IOS` instead of `Ios`\\n2. **ID suffix convention**: All fields ending with `ID` now use `Id` instead for consistency (e.g., `subscriptionGroupID` \u2192 `subscriptionGroupId`, `bundleID` \u2192 `bundleId`)\\n\\n**Note:** Android field names remain unchanged as they already follow the correct convention (e.g., `autoRenewingAndroid`, `purchaseTokenAndroid`).\\n\\n\x3c!-- truncate --\x3e\\n\\nimport AdFitTopFixed from \\"@site/src/uis/AdFitTopFixed\\";\\n\\n<AdFitTopFixed />\\n\\n## What Changed\\n\\n## iOS Changes\\n\\n### Product Types\\n\\n**ProductIOS & ProductSubscriptionIOS:**\\n\\n- `displayName` - Product display name\\n- `isFamilyShareable` - Family sharing availability\\n- `jsonRepresentation` - JSON representation of product\\n- `introductoryPriceNumberOfPeriodsIOS` - Introductory price period count\\n- `introductoryPriceSubscriptionPeriodIOS` - Introductory price period\\n- `introductoryPriceAsAmountIOS` - Introductory price amount\\n- `introductoryPricePaymentModeIOS` - Introductory price payment mode\\n- `subscriptionPeriodNumberIOS` - Subscription period number\\n- `subscriptionPeriodUnitIOS` - Subscription period unit\\n\\n**SubscriptionInfo:**\\n\\n- `subscriptionGroupId` - Subscription group identifier (changed from `subscriptionGroupID`)\\n\\n### Purchase Types\\n\\n**ProductPurchaseIOS** includes these StoreKit 2 fields:\\n\\n- `quantityIOS`, `originalTransactionDateIOS`, `originalTransactionIdentifierIOS`\\n- `expirationDateIOS`, `webOrderLineItemIdIOS`, `environmentIOS`\\n- `storefrontCountryCodeIOS`, `appBundleIdIOS`, `productTypeIOS`\\n- `subscriptionGroupIdIOS`, `isUpgradedIOS`, `ownershipTypeIOS`\\n- `reasonIOS`, `reasonStringRepresentationIOS`, `transactionReasonIOS`\\n- `revocationDateIOS`, `revocationReasonIOS`, `offerIOS`\\n- `priceIOS`, `currencyIOS`, `jwsRepresentationIOS` (deprecated)\\n\\n**AppTransactionIOS** (iOS 16.0+):\\n\\n- `appTransactionId` - App transaction identifier (changed from `appTransactionID`)\\n- `bundleId` - Bundle identifier (changed from `bundleID`)\\n- `appId` - App identifier (changed from `appID`)\\n- `appVersionId` - App version identifier (changed from `appVersionID`)\\n\\n**Breaking Changes - Field Renaming:**\\n\\n### iOS Suffix Changes (Ios \u2192 IOS)\\n\\n| Old Field Name                     | New Field Name                     |\\n| ---------------------------------- | ---------------------------------- |\\n| `quantityIos`                      | `quantityIOS`                      |\\n| `originalTransactionDateIos`       | `originalTransactionDateIOS`       |\\n| `originalTransactionIdentifierIos` | `originalTransactionIdentifierIOS` |\\n| `appBundleIdIos`                   | `appBundleIdIOS`                   |\\n| `productTypeIos`                   | `productTypeIOS`                   |\\n| `subscriptionGroupIdIos`           | `subscriptionGroupIdIOS`           |\\n| `webOrderLineItemIdIos`            | `webOrderLineItemIdIOS`            |\\n| `expirationDateIos`                | `expirationDateIOS`                |\\n| `isUpgradedIos`                    | `isUpgradedIOS`                    |\\n| `ownershipTypeIos`                 | `ownershipTypeIOS`                 |\\n| `revocationDateIos`                | `revocationDateIOS`                |\\n| `revocationReasonIos`              | `revocationReasonIOS`              |\\n| `transactionReasonIos`             | `transactionReasonIOS`             |\\n| `environmentIos`                   | `environmentIOS`                   |\\n| `storefrontCountryCodeIos`         | `storefrontCountryCodeIOS`         |\\n| `reasonIos`                        | `reasonIOS`                        |\\n| `offerIos`                         | `offerIOS`                         |\\n| `priceIos`                         | `priceIOS`                         |\\n| `currencyIos`                      | `currencyIOS`                      |\\n| `jwsRepresentationIos`             | `jwsRepresentationIOS`             |\\n| `reasonStringRepresentationIos`    | `reasonStringRepresentationIOS`    |\\n\\n### ID Suffix Changes (ID \u2192 Id)\\n\\n| Old Field Name        | New Field Name        | Type/Context      |\\n| --------------------- | --------------------- | ----------------- |\\n| `subscriptionGroupID` | `subscriptionGroupId` | SubscriptionInfo  |\\n| `appTransactionID`    | `appTransactionId`    | AppTransactionIOS |\\n| `bundleID`            | `bundleId`            | AppTransactionIOS |\\n| `appID`               | `appId`               | AppTransactionIOS |\\n| `appVersionID`        | `appVersionId`        | AppTransactionIOS |\\n\\n### Function Parameter Changes\\n\\n| Function                     | Old Parameter | New Parameter |\\n| ---------------------------- | ------------- | ------------- |\\n| `isEligibleForIntroOfferIOS` | `groupID`     | `groupId`     |\\n\\n## Android Changes\\n\\n### Product Types\\n\\n**ProductAndroid & ProductSubscriptionAndroid:**\\n\\n- `name` - Product display name\\n- `oneTimePurchaseOfferDetails` - One-time purchase offer details\\n- `subscriptionOfferDetails` - Subscription offer details array\\n\\n### Purchase Types\\n\\n**ProductPurchaseAndroid** includes these Android Billing Library fields:\\n\\n- `ids` - Array of product IDs\\n- `purchaseTokenAndroid` - Android purchase token (deprecated, use `purchaseToken`)\\n- `dataAndroid` - Purchase data\\n- `signatureAndroid` - Purchase signature\\n- `autoRenewingAndroid` - Auto-renewal status\\n- `purchaseStateAndroid` - Purchase state enum\\n- `isAcknowledgedAndroid` - Acknowledgment status\\n- `packageNameAndroid` - App package name\\n- `developerPayloadAndroid` - Developer payload\\n- `obfuscatedAccountIdAndroid` - Obfuscated account ID\\n- `obfuscatedProfileIdAndroid` - Obfuscated profile ID\\n\\n### Request Props\\n\\n**RequestPurchaseAndroidProps:**\\n\\n- `isOfferPersonalized` - For Android Billing V5 personalized pricing\\n\\n**No Breaking Changes** - All Android fields maintain existing naming convention.\\n\\n## How to Migrate\\n\\n### Step 1: Update Field References\\n\\nSearch your codebase for any references to the old field names and update them:\\n\\n```typescript\\n// Before (2.7.x)\\nconst purchase = await requestPurchase({sku: \'product-id\'});\\nif (purchase.expirationDateIos) {\\n  console.log(\'Expires:\', purchase.expirationDateIos);\\n}\\n\\n// After (2.8.0)\\n// Note: requestPurchase API signature has also changed in 2.8.0\\nconst purchase = await requestPurchase({\\n  request: {\\n    ios: {sku: \'product-id\'},\\n    android: {skus: [\'product-id\']},\\n  },\\n  type: \'in-app\',\\n});\\nif (purchase.expirationDateIOS) {\\n  console.log(\'Expires:\', purchase.expirationDateIOS);\\n}\\n```\\n\\n## Bug Fixes and Operational Notes\\n\\n- **iOS Hot Reload Fix (2.7.7)**: This version addresses critical failures during React Native\'s fast refresh on iOS, which could leave StoreKit in an inconsistent state. Previously, concurrent operations like `Promise.all([fetchProducts(...), getAvailablePurchases()])` would fail during hot reloads. The native module now cleans up its state during `initConnection()`, validates connections with `ensureConnection()` across all public APIs (similar to Android), and properly manages StoreKit resources. No code changes are needed to benefit from this fix, but `expo-iap@2.7.7+` is required.\\n- Metro bundling resolution (2.9.6): Fixed an ambiguous import in the hook implementation that could cause Metro to attempt to resolve `../../..` and crash. The import now explicitly targets `./index`.\\n\\n## v2.7.3 Release \u2014 Google Play Billing Library v8.0.0 Support\\n\\nWe shipped v2.7.3 to add full support for Google Play Billing Library v8.0.0. This ensures compatibility with the latest Android billing features and improves error diagnostics.\\n\\n### What\'s New\\n\\n- Upgraded Google Play Billing from v7.0.0 to v8.0.0\\n- Enhanced error handling with sub-response codes for better debugging\\n- API compatibility updates for new callback signatures\\n\\n### Key Changes\\n\\n- Updated `queryProductDetailsAsync` callback to use `QueryProductDetailsResult`\\n- Improved `enablePendingPurchases` configuration\\n- Removed deprecated, hardcoded Kotlin version constraints\\n\\n### Breaking Changes\\n\\nAndroid Kotlin version requirement: Play Billing v8.0.0 requires Kotlin 2.0+. Because `expo-modules-core` did not yet support Kotlin v2 at the time, you must set Kotlin 2.0.21 explicitly via `expo-build-properties`:\\n\\n```json\\n{\\n  \\"expo\\": {\\n    \\"plugins\\": [\\n      [\\n        \\"expo-build-properties\\",\\n        {\\n          \\"android\\": {\\n            \\"kotlinVersion\\": \\"2.0.21\\"\\n          }\\n        }\\n      ]\\n    ]\\n  }\\n}\\n```\\n\\n### Installation\\n\\nIf you\'re upgrading to v2.7.3:\\n\\n```sh\\nnpx expo install expo-iap@2.7.3\\n```\\n\\nDon\'t forget to add the `expo-build-properties` configuration to your app.json if you haven\'t already.\\n\\n### Step 2: Update Type Imports and Declarations\\n\\nType names have also been updated to use uppercase `IOS`:\\n\\n```typescript\\n// Before (2.7.x)\\nimport {\\n  ProductIOS,\\n  ProductPurchaseIos,\\n  ProductSubscriptionIOS,\\n  ProductStatusIos,\\n} from \'expo-iap\';\\n\\n// After (2.8.0)\\nimport {\\n  ProductIOS,\\n  ProductPurchaseIOS,\\n  ProductSubscriptionIOS,\\n  ProductStatusIOS,\\n} from \'expo-iap\';\\n```\\n\\n**Note:** The old type names are still available as deprecated aliases for backward compatibility, but we recommend updating to the new names.\\n\\n### Step 3: Update Type Checks\\n\\nIf you\'re using TypeScript and checking for iOS-specific fields:\\n\\n```typescript\\n// Before (2.7.x)\\nif (\'expirationDateIos\' in purchase) {\\n  // Handle subscription\\n}\\n\\n// After (2.8.0)\\nif (\'expirationDateIOS\' in purchase) {\\n  // Handle subscription\\n}\\n```\\n\\n### Step 4: Update ID Field References\\n\\nUpdate all ID field references to use `Id` instead:\\n\\n```typescript\\n// Before (2.7.x)\\nconst appTransaction = await getAppTransactionIOS();\\nconsole.log(appTransaction.bundleID);\\nconsole.log(appTransaction.appID);\\n\\n// After (2.8.0)\\nconst appTransaction = await getAppTransactionIOS();\\nconsole.log(appTransaction.bundleId);\\nconsole.log(appTransaction.appId);\\n```\\n\\n### Step 5: Update Subscription Helpers\\n\\nIf you\'re using the subscription helper functions:\\n\\n```typescript\\n// Before (2.7.x)\\nconst subscription = {\\n  expirationDateIos: purchase.expirationDateIos,\\n  environmentIos: purchase.environmentIos,\\n};\\n\\n// After (2.8.0)\\nconst subscription = {\\n  expirationDateIOS: purchase.expirationDateIOS,\\n  environmentIOS: purchase.environmentIOS,\\n};\\n```\\n\\n## Quick Migration Script\\n\\nYou can use this regex find/replace pattern in your IDE to quickly update most occurrences:\\n\\n**Find Pattern (Regex):**\\n\\n```text\\n\\\\b(\\\\w+)(Ios)\\\\b\\n```\\n\\n**Replace Pattern:**\\n\\n```text\\n$1IOS\\n```\\n\\n\u26a0\ufe0f **Note:** Review each replacement carefully as this might affect non-field references.\\n\\n## Why This Change?\\n\\nThese changes align with widely-adopted naming conventions:\\n\\n1. **iOS suffix**: Acronyms at the end of identifiers are written in uppercase (e.g., `dataIOS`, `configIOS`)\\n2. **ID suffix**: The `Id` convention is more common in modern JavaScript/TypeScript codebases (e.g., `userId`, `productId`, `transactionId`)\\n\\nThis makes the codebase more consistent and follows best practices in the TypeScript/JavaScript ecosystem.\\n\\n## Need Help?\\n\\nIf you encounter any issues during migration:\\n\\n- Check our [GitHub Issues](https://github.com/hyochan/expo-iap/issues)\\n- Join our [Slack community](https://hyo.dev/joinSlack)\\n- Review the [full documentation](https://hyochan.github.io/expo-iap)"},{"id":"2.7.0","metadata":{"permalink":"/expo-iap/blog/2.7.0","editUrl":"https://github.com/hyochan/expo-iap/tree/main/docs/blog/2025-07-23-2.7.0.md","source":"@site/blog/2025-07-23-2.7.0.md","title":"2.7.0 - New Platform API & Google Play Billing v8","description":"We\'re excited to announce expo-iap 2.7.0! This release includes a cleaner platform-specific API for handling purchases and full support for Google Play Billing Library v8.0.0.","date":"2025-07-23T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/expo-iap/blog/tags/release","description":"New version releases and updates"},{"inline":false,"label":"API","permalink":"/expo-iap/blog/tags/api","description":"API updates and changes"},{"inline":false,"label":"Breaking Changes","permalink":"/expo-iap/blog/tags/breaking-changes","description":"Updates that require code changes"},{"inline":false,"label":"Android","permalink":"/expo-iap/blog/tags/android","description":"Android platform specific features"},{"inline":false,"label":"Google Play Billing","permalink":"/expo-iap/blog/tags/google-play-billing","description":"Google Play Billing Library updates"}],"readingTime":5.38,"hasTruncateMarker":true,"authors":[{"name":"Hyo","title":"Expo IAP Maintainer","url":"https://github.com/hyochan","page":{"permalink":"/expo-iap/blog/authors/hyochan"},"socials":{"github":"https://github.com/hyochan","linkedin":"https://www.linkedin.com/in/hyochanjang/","x":"https://x.com/hyodotdev"},"imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"2.7.0","title":"2.7.0 - New Platform API & Google Play Billing v8","authors":["hyochan"],"tags":["release","api","breaking-changes","android","google-play-billing"],"date":"2025-07-23T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"2.8.0 Migration Guide - iOS Field Naming Convention Update","permalink":"/expo-iap/blog/2.8.0-migration-guide"},"nextItem":{"title":"2.6.0 - Major iOS Improvements","permalink":"/expo-iap/blog/2.6.0"}},"content":"We\'re excited to announce expo-iap 2.7.0! This release includes a cleaner platform-specific API for handling purchases and full support for Google Play Billing Library v8.0.0.\\n\\n\x3c!-- truncate --\x3e\\n\\nimport AdFitTopFixed from \\"@site/src/uis/AdFitTopFixed\\";\\n\\n<AdFitTopFixed />\\n\\n## \ud83c\udfaf New Platform-Specific API\\n\\n### The Problem\\n\\nPreviously, developers had to write conditional logic to handle platform differences:\\n\\n```tsx\\n// Old approach - requires platform checks\\nif (Platform.OS === \'ios\') {\\n  await requestPurchase({\\n    request: {sku: productId},\\n  });\\n} else {\\n  await requestPurchase({\\n    request: {skus: [productId]},\\n  });\\n}\\n```\\n\\nThis approach had several issues:\\n\\n- Required manual platform checks\\n- Easy to miss platform-specific parameters\\n- TypeScript couldn\'t provide proper platform-specific type hints\\n\\n### The Solution: Platform-Specific Parameters\\n\\nThe new API introduces a cleaner structure with explicit platform parameters:\\n\\n```tsx\\n// New approach - clear platform separation\\nawait requestPurchase({\\n  request: {\\n    ios: {\\n      sku: productId,\\n      appAccountToken: \'user-123\',\\n    },\\n    android: {\\n      skus: [productId],\\n      obfuscatedAccountIdAndroid: \'user-123\',\\n    },\\n  },\\n});\\n```\\n\\n### Key Benefits\\n\\n1. **Better Type Safety**: TypeScript now provides accurate autocompletion for each platform\'s specific parameters\\n2. **Clearer Code Structure**: Platform-specific logic is clearly separated\\n3. **Backward Compatibility**: The old API still works, so you can migrate at your own pace\\n\\n### Migration Examples\\n\\n#### Basic Product Purchase\\n\\n**Before:**\\n\\n```tsx\\nconst buyProduct = async (productId: string) => {\\n  if (Platform.OS === \'ios\') {\\n    await requestPurchase({\\n      request: {sku: productId},\\n    });\\n  } else {\\n    await requestPurchase({\\n      request: {skus: [productId]},\\n    });\\n  }\\n};\\n```\\n\\n**After:**\\n\\n```tsx\\nconst buyProduct = async (productId: string) => {\\n  await requestPurchase({\\n    request: {\\n      ios: {sku: productId},\\n      android: {skus: [productId]},\\n    },\\n  });\\n};\\n```\\n\\n#### Subscription Purchase\\n\\n**Before:**\\n\\n```tsx\\nconst buySubscription = async (subId: string) => {\\n  if (Platform.OS === \'ios\') {\\n    await requestPurchase({\\n      request: {\\n        sku: subId,\\n        appAccountToken: \'user-123\',\\n      },\\n      type: \'subs\',\\n    });\\n  } else {\\n    const subscription = subscriptions.find((s) => s.id === subId);\\n    const offer = subscription?.subscriptionOfferDetails?.[0];\\n\\n    await requestPurchase({\\n      request: {\\n        skus: [subId],\\n        subscriptionOffers: [\\n          {\\n            sku: subId,\\n            offerToken: offer?.offerToken || \'\',\\n          },\\n        ],\\n      },\\n      type: \'subs\',\\n    });\\n  }\\n};\\n```\\n\\n**After:**\\n\\n```tsx\\nconst buySubscription = async (subId: string) => {\\n  const subscription = subscriptions.find((s) => s.id === subId);\\n\\n  await requestPurchase({\\n    request: {\\n      ios: {\\n        sku: subId,\\n        appAccountToken: \'user-123\',\\n      },\\n      android: {\\n        skus: [subId],\\n        subscriptionOffers:\\n          subscription?.subscriptionOfferDetails?.map((offer) => ({\\n            sku: subId,\\n            offerToken: offer.offerToken,\\n          })) || [],\\n      },\\n    },\\n    type: \'subs\',\\n  });\\n};\\n```\\n\\n### Platform-Specific Parameters\\n\\n#### iOS Parameters\\n\\n```tsx\\n{\\n  ios: {\\n    sku: string;                                        // Required: Product SKU\\n    andDangerouslyFinishTransactionAutomatically?: boolean;\\n    appAccountToken?: string;                           // For server validation\\n    quantity?: number;                                  // For bulk purchases\\n    withOffer?: PaymentDiscount;                        // For discounts\\n  }\\n}\\n```\\n\\n#### Android Parameters\\n\\n```tsx\\n{\\n  android: {\\n    skus: string[];                                     // Required: Product SKUs\\n    obfuscatedAccountIdAndroid?: string;                // User identifier\\n    obfuscatedProfileIdAndroid?: string;                // Profile identifier\\n    isOfferPersonalized?: boolean;                      // For personalized pricing\\n\\n    // For subscriptions only:\\n    subscriptionOffers?: Array<{\\n      sku: string;\\n      offerToken: string;\\n    }>;\\n    purchaseTokenAndroid?: string;                      // For upgrades/downgrades\\n    replacementModeAndroid?: number;                    // Proration mode\\n  }\\n}\\n```\\n\\n## \ud83d\udd04 Deprecation Notice: requestSubscription\\n\\nStarting from 2.7.0, `requestSubscription` is deprecated in favor of using `requestPurchase` with `type: \'subs\'`. This unifies our API and makes the codebase cleaner.\\n\\n**Migration example:**\\n\\n```tsx\\n// Old way (deprecated)\\nawait requestSubscription({\\n  sku: subscriptionId,\\n  skus: [subscriptionId],\\n});\\n\\n// New way (recommended)\\nawait requestPurchase({\\n  request: {\\n    ios: {sku: subscriptionId},\\n    android: {skus: [subscriptionId]},\\n  },\\n  type: \'subs\',\\n});\\n```\\n\\n## \ud83e\udd16 Google Play Billing Library v8.0.0 Support\\n\\nWe\'ve updated to Google Play Billing Library v8.0.0 to meet Google Play\'s latest requirements. For more details on the migration, see [Google\'s official migration guide](https://developer.android.com/google/play/billing/migrate-gpblv8).\\n\\n### Key Changes\\n\\n#### 1. Updated Dependencies\\n\\nThe Android module now uses the latest Google Play Billing Library:\\n\\n```gradle\\nimplementation \\"com.android.billingclient:billing-ktx:8.0.0\\"\\n```\\n\\n#### 2. Removed Deprecated Methods\\n\\n> getPurchaseHistory is no longer available on Android\\n\\nGoogle Play Billing Library v8 has removed the `queryPurchaseHistoryAsync()` method. The `getPurchaseHistories()` function will now return an empty array on Android with a console warning:\\n\\n```typescript\\n// Before v8\\nconst history = await getPurchaseHistories(); // Returns purchase history\\n\\n// After v8\\nconst history = await getPurchaseHistories(); // Returns [] on Android with warning\\n// Use getAvailablePurchases() instead for active purchases\\n```\\n\\n#### 3. Automatic Service Reconnection\\n\\nThe library now includes automatic service reconnection support, improving reliability when the billing service disconnects unexpectedly.\\n\\n#### 4. Sub-Response Codes\\n\\nThe library now provides more detailed error information through sub-response codes:\\n\\n```javascript\\n// Error object now includes sub-response codes\\n{\\n  responseCode: 6, // ERROR\\n  debugMessage: \\"Error processing purchase\\",\\n  subResponseCode: 1, // PAYMENT_DECLINED_DUE_TO_INSUFFICIENT_FUNDS\\n  subResponseMessage: \\"Payment declined due to insufficient funds\\"\\n}\\n```\\n\\n### Breaking Changes Summary\\n\\n1. **`getPurchaseHistory()` removed** - Use `getAvailablePurchases()` instead\\n2. **`querySkuDetailsAsync()` removed** - Already migrated to `queryProductDetailsAsync()`\\n3. **`enablePendingPurchases()` signature changed** - Now requires `PendingPurchasesParams`\\n4. **`queryPurchasesAsync(skuType)` removed** - Use `queryPurchasesAsync(QueryPurchasesParams)` instead\\n\\n### Migration Guide for getPurchaseHistory\\n\\nIf you\'re using `getPurchaseHistory()` or `getPurchaseHistories()` on Android:\\n\\n```typescript\\n// Old approach\\nconst history = await getPurchaseHistories();\\n\\n// New approach - use getAvailablePurchases for active purchases\\nconst activePurchases = await getAvailablePurchases();\\n```\\n\\n## \ud83d\ude80 Best Practices\\n\\n1. **Handle Platform Availability**: Not all parameters need to be set for both platforms\\n\\n   ```tsx\\n   await requestPurchase({\\n     request: {\\n       ios: {sku: productId},\\n       android: {skus: [productId]},\\n     },\\n   });\\n   ```\\n\\n2. **Use TypeScript**: Let TypeScript guide you with autocompletion\\n\\n   ```tsx\\n   await requestPurchase({\\n     request: {\\n       ios: {\\n         // TypeScript will show iOS-specific options\\n       },\\n       android: {\\n         // TypeScript will show Android-specific options\\n       },\\n     },\\n   });\\n   ```\\n\\n3. **Gradual Migration**: The old API still works, migrate at your own pace\\n\\n## \ud83d\udce6 Upgrading\\n\\nTo upgrade to version 2.7.0:\\n\\n```bash\\nnpm install expo-iap@2.7.0\\n# or\\nyarn add expo-iap@2.7.0\\n# or\\nbun add expo-iap@2.7.0\\n```\\n\\n### Requirements\\n\\n- Android Gradle Plugin 4.0 or higher\\n- Kotlin 1.6 or higher\\n- JVM target 17 (automatically configured)\\n- Google Play\'s latest billing requirements (deadline: August 31, 2025)\\n\\n## \ud83c\udf89 Benefits\\n\\n- **Cleaner Code**: No more Platform.OS checks in your purchase logic\\n- **Better Type Safety**: Platform-specific TypeScript hints\\n- **Future-Proof**: Compliance with Google Play\'s latest requirements\\n- **Improved Reliability**: Automatic service reconnection on Android\\n- **Enhanced Error Handling**: Detailed sub-response codes\\n\\n## \ud83d\udcda Documentation\\n\\n- Check our [updated documentation](/docs/guides/purchases)\\n- View [complete examples](https://github.com/hyochan/expo-iap/tree/main/example)\\n- Join our [community discussions](https://github.com/hyochan/expo-iap/discussions)\\n\\n## \ud83d\udcac Feedback\\n\\nIf you encounter any issues with this update, please [open an issue](https://github.com/hyochan/expo-iap/issues) on our GitHub repository.\\n\\nHappy coding! \ud83d\ude80\\n\\n---\\n\\n## 2.6.3 \u2014 iOS AppTransaction Support\\n\\nWe\'re excited to highlight the 2.6.3 update that shipped critical fixes and full coverage for iOS AppTransaction (StoreKit 2) properties.\\n\\n### What\'s New\\n\\nComplete AppTransaction properties are now returned by `getAppTransactionIOS()`:\\n\\n```ts\\nexport type AppTransactionIOS = {\\n  appTransactionID: string;\\n  bundleID: string;\\n  appVersion: string;\\n  originalAppVersion: string;\\n  originalPurchaseDate: number;\\n  deviceVerification: string;\\n  deviceVerificationNonce: string;\\n  environment: string;\\n  signedDate: number;\\n  appID?: number;\\n  appVersionID?: number;\\n  originalPlatform: string;\\n  preorderDate?: number;\\n};\\n```\\n\\n### Key Properties Added\\n\\n- `appTransactionID`: The unique identifier for the app transaction\\n- `environment`: Indicates whether the transaction occurred in Production, Sandbox, or Xcode environment\\n- `signedDate`: The date when the transaction was signed\\n- `appID` and `appVersionID`: App Store identifiers for the app and version\\n- `originalPlatform`: The platform where the app was originally purchased\\n- `preorderDate`: Available when the app was pre-ordered\\n\\n### Usage Example\\n\\n```ts\\nimport {getAppTransactionIOS} from \'expo-iap\';\\n\\nconst getAppPurchaseInfo = async () => {\\n  try {\\n    const appTransaction = await getAppTransactionIOS();\\n\\n    console.log(\'App Transaction ID:\', appTransaction.appTransactionID);\\n    console.log(\'Environment:\', appTransaction.environment);\\n    console.log(\\n      \'Original Purchase Date:\',\\n      new Date(appTransaction.originalPurchaseDate),\\n    );\\n\\n    // Check if app was pre-ordered\\n    if (appTransaction.preorderDate) {\\n      console.log(\'Pre-order Date:\', new Date(appTransaction.preorderDate));\\n    }\\n  } catch (error) {\\n    console.error(\'Failed to get app transaction:\', error);\\n  }\\n};\\n```\\n\\nNote: In 2.8.0, these fields were renamed to use the unified `Id` casing (for example, `appTransactionId`, `bundleId`, `appVersionId`). See the 2.8.0 migration guide for details."},{"id":"2.6.0","metadata":{"permalink":"/expo-iap/blog/2.6.0","editUrl":"https://github.com/hyochan/expo-iap/tree/main/docs/blog/2025-07-21-2.6.0.md","source":"@site/blog/2025-07-21-2.6.0.md","title":"2.6.0 - Major iOS Improvements","description":"We\'re excited to announce the release of expo-iap 2.6.0! This release brings significant improvements to iOS functionality, better TypeScript support, and enhanced developer experience.","date":"2025-07-21T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/expo-iap/blog/tags/release","description":"New version releases and updates"},{"inline":false,"label":"iOS","permalink":"/expo-iap/blog/tags/ios","description":"iOS platform specific features"},{"inline":false,"label":"TypeScript","permalink":"/expo-iap/blog/tags/typescript","description":"TypeScript type definitions and improvements"},{"inline":false,"label":"Breaking Changes","permalink":"/expo-iap/blog/tags/breaking-changes","description":"Updates that require code changes"}],"readingTime":3.94,"hasTruncateMarker":true,"authors":[{"name":"Hyo","title":"Expo IAP Maintainer","url":"https://github.com/hyochan","page":{"permalink":"/expo-iap/blog/authors/hyochan"},"socials":{"github":"https://github.com/hyochan","linkedin":"https://www.linkedin.com/in/hyochanjang/","x":"https://x.com/hyodotdev"},"imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"2.6.0","title":"2.6.0 - Major iOS Improvements","authors":["hyochan"],"tags":["release","ios","typescript","breaking-changes"],"date":"2025-07-21T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"2.7.0 - New Platform API & Google Play Billing v8","permalink":"/expo-iap/blog/2.7.0"},"nextItem":{"title":"Welcome to Expo IAP Documentation","permalink":"/expo-iap/blog/welcome-to-expo-iap"}},"content":"We\'re excited to announce the release of expo-iap 2.6.0! This release brings significant improvements to iOS functionality, better TypeScript support, and enhanced developer experience.\\n\\n\x3c!-- truncate --\x3e\\n\\nimport AdFitTopFixed from \\"@site/src/uis/AdFitTopFixed\\";\\n\\n<AdFitTopFixed />\\n\\n## \ud83c\udf89 What\'s New\\n\\n### 1. Proper iOS Subscription Data Serialization\\n\\nThe biggest improvement in this release is the proper serialization of iOS subscription data. Previously, the `subscription` field would return undefined for subscription products. Now, all subscription information is properly serialized and accessible.\\n\\n#### Before (2.5.x)\\n\\n```typescript\\nconst subscriptions = await getSubscriptions([\'com.example.premium\']);\\nconsole.log(subscriptions[0].subscription); // undefined \ud83d\ude22\\n```\\n\\n#### After (2.6.0)\\n\\n```typescript\\nconst subscriptions = await getSubscriptions([\'com.example.premium\']);\\nconsole.log(subscriptions[0].subscription); // \u2705 Full subscription data!\\n```\\n\\n### 2. Improved Type Structure\\n\\nWe\'ve restructured how period information is returned to be more consistent and useful. The `period` and `subscriptionPeriod` properties now return objects with `unit` and `value` properties instead of just the unit string.\\n\\n**Before (2.5.x):**\\n\\n```typescript\\ntype SubscriptionInfo = {\\n  subscriptionPeriod: SubscriptionIosPeriod; // \'DAY\' | \'WEEK\' | \'MONTH\' | \'YEAR\'\\n};\\n```\\n\\n**After (2.6.0):**\\n\\n```typescript\\ntype SubscriptionInfo = {\\n  subscriptionPeriod: {\\n    unit: SubscriptionIosPeriod; // \'DAY\' | \'WEEK\' | \'MONTH\' | \'YEAR\'\\n    value: number; // e.g., 1, 3, 6, 12\\n  };\\n};\\n```\\n\\nThis change provides more detailed information about subscription periods. For example, instead of just knowing a subscription is \\"MONTH\\", you now know if it\'s \\"1 MONTH\\", \\"3 MONTHS\\", etc.\\n\\n### 3. New getStorefront() API\\n\\nGet the user\'s App Store country code:\\n\\n```typescript\\nimport {getStorefront} from \'expo-iap\';\\n\\nconst countryCode = await getStorefront();\\nconsole.log(\'User storefront:\', countryCode); // \'US\', \'GB\', \'JP\', etc.\\n```\\n\\n### 4. AppTransaction Support (iOS 16.0+)\\n\\nFor premium apps or apps that were previously paid, you can now verify the initial app purchase:\\n\\n```typescript\\nimport {getAppTransaction} from \'expo-iap\';\\n\\nconst appTransaction = await getAppTransaction();\\nif (appTransaction) {\\n  console.log(\'App Transaction ID:\', appTransaction.appTransactionID);\\n  console.log(\'Purchase Date:\', new Date(appTransaction.originalPurchaseDate));\\n  // Send deviceVerification to your server for validation\\n}\\n```\\n\\n### 5. Comprehensive iOS Subscription Offers Documentation\\n\\nWe\'ve added extensive documentation for handling iOS subscription offers:\\n\\n- Understanding introductory and promotional offers\\n- Checking user eligibility\\n- Implementing offer UI\\n- Best practices and troubleshooting\\n\\nCheck out the new [iOS Subscription Offers Guide](/docs/2.6/guides/ios-subscription-offers).\\n\\n## \u26a0\ufe0f Breaking Changes\\n\\n### 1. Period Structure Changes\\n\\nThe `period` and `subscriptionPeriod` properties now return objects with `unit` and `value` properties:\\n\\n```typescript\\n// Before\\nif (offer.period === \'MONTH\') {\\n  console.log(\'Monthly offer\');\\n}\\n\\n// After\\nif (offer.period.unit === \'MONTH\') {\\n  console.log(`${offer.period.value} month(s) offer`);\\n}\\n```\\n\\n### 2. Optional Subscription Field\\n\\nThe `subscription` field in `ProductIOS` is now optional to reflect that not all iOS products have subscription information:\\n\\n```typescript\\n// Before\\ntype ProductIOS = {\\n  subscription: SubscriptionInfo; // Always required\\n};\\n\\n// After\\ntype ProductIOS = {\\n  subscription?: SubscriptionInfo; // Optional - only present for subscriptions\\n};\\n```\\n\\n**Migration:** Update your code to handle the optional subscription field:\\n\\n```typescript\\n// Check if product is a subscription\\nif (product.subscription) {\\n  // Handle subscription-specific logic\\n  console.log(\'Period:\', product.subscription.subscriptionPeriod);\\n}\\n```\\n\\n### 3. Method Naming Update\\n\\nTo improve consistency, we\'ve updated the purchase history method naming:\\n\\n- **Deprecated**: `getPurchaseHistory()` (singular)\\n- **New**: `getPurchaseHistories()` (plural)\\n\\nThe `useIAP` hook already uses the plural form:\\n\\n```typescript\\nconst {purchaseHistories, getPurchaseHistories} = useIAP();\\n```\\n\\n## \ud83d\udccb Complete Example\\n\\nHere\'s a complete example showing how to work with the new types:\\n\\n```typescript\\nimport {useIAP} from \'expo-iap\';\\n\\nfunction ProductList() {\\n  const {products} = useIAP();\\n\\n  return (\\n    <View>\\n      {products.map((product) => (\\n        <View key={product.productId}>\\n          <Text>{product.displayName}</Text>\\n          <Text>{product.localizedPrice}</Text>\\n\\n          {product.subscription && (\\n            <View>\\n              <Text>\\n                Subscription Period:{\' \'}\\n                {product.subscription.subscriptionPeriod.value}{\' \'}\\n                {product.subscription.subscriptionPeriod.unit.toLowerCase()}(s)\\n              </Text>\\n\\n              {product.subscription.introductoryOffer && (\\n                <Text>\\n                  Intro Offer:{\' \'}\\n                  {product.subscription.introductoryOffer.displayPrice} for{\' \'}\\n                  {product.subscription.introductoryOffer.period.value}{\' \'}\\n                  {product.subscription.introductoryOffer.period.unit.toLowerCase()}\\n                  (s)\\n                </Text>\\n              )}\\n            </View>\\n          )}\\n        </View>\\n      ))}\\n    </View>\\n  );\\n}\\n```\\n\\n## \ud83d\udc1b Bug Fixes\\n\\n- Fixed iOS subscription data not being properly serialized\\n- Fixed period information returning raw values instead of structured data\\n- Improved error handling for platform-specific methods\\n- Fixed inconsistent naming between `getPurchaseHistory` and `purchaseHistories`\\n\\n## \ud83d\udcda Documentation Updates\\n\\n- Added iOS Subscription Offers guide\\n- Updated type definitions documentation\\n- Added examples for new APIs\\n- Improved troubleshooting section\\n- Updated migration guide for naming consistency\\n\\n## \ud83d\udcaa Benefits\\n\\nThese improvements provide several benefits:\\n\\n1. **Better Type Safety**: The TypeScript compiler can now catch more potential errors at compile time\\n2. **More Accurate Data**: Period information now includes both unit and value, providing complete subscription duration details\\n3. **Clearer Intent**: Optional types make it explicit which products are subscriptions\\n4. **Consistent API**: Naming conventions are now consistent throughout the library\\n5. **Future-Proof**: These changes align better with Apple\'s StoreKit 2 data structures\\n\\n## \ud83d\ude4f Acknowledgments\\n\\nSpecial thanks to:\\n\\n- [@Navipro70](https://github.com/Navipro70) for identifying the subscription serialization issue and providing valuable feedback\\n- [@matthieuMay](https://github.com/matthieuMay) for the initial iOS type improvements\\n- All contributors who helped test and improve this release\\n\\n## \ud83d\udce6 Installation\\n\\nUpdate to the latest version:\\n\\n```bash\\nnpm install expo-iap@2.6.0\\n# or\\nyarn add expo-iap@2.6.0\\n```\\n\\n## \ud83d\udd17 Links\\n\\n- [Full Changelog](https://github.com/hyochan/expo-iap/releases/tag/v2.6.0)\\n- [iOS Subscription Offers Guide](/docs/2.6/guides/ios-subscription-offers)\\n- [API Reference](/docs/api/methods/core-methods)\\n- [Migration Guide](/docs/2.6/guides/migration)\\n\\n## What\'s Next?\\n\\nWe\'re working on:\\n\\n- Android subscription offers improvements\\n- Better error messages and debugging tools\\n- Performance optimizations\\n- More comprehensive examples\\n\\nStay tuned for more updates! If you have any feedback or suggestions, please [open an issue](https://github.com/hyochan/expo-iap/issues).\\n\\nHappy coding! \ud83d\ude80"},{"id":"welcome-to-expo-iap","metadata":{"permalink":"/expo-iap/blog/welcome-to-expo-iap","editUrl":"https://github.com/hyochan/expo-iap/tree/main/docs/blog/2025-06-01-welcome-to-expo-iap.md","source":"@site/blog/2025-06-01-welcome-to-expo-iap.md","title":"Welcome to Expo IAP Documentation","description":"Welcome to the official documentation site for Expo IAP! \ud83c\udf89","date":"2025-06-01T00:00:00.000Z","tags":[{"inline":false,"label":"Expo IAP","permalink":"/expo-iap/blog/tags/expo-iap","description":"In-app purchase library for Expo and React Native"},{"inline":false,"label":"In-App Purchase","permalink":"/expo-iap/blog/tags/in-app-purchase","description":"Mobile in-app purchase implementation"},{"inline":false,"label":"React Native","permalink":"/expo-iap/blog/tags/react-native","description":"React Native development"}],"readingTime":0.61,"hasTruncateMarker":true,"authors":[{"name":"Hyo","title":"Expo IAP Maintainer","url":"https://github.com/hyochan","page":{"permalink":"/expo-iap/blog/authors/hyochan"},"socials":{"github":"https://github.com/hyochan","linkedin":"https://www.linkedin.com/in/hyochanjang/","x":"https://x.com/hyodotdev"},"imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"welcome-to-expo-iap","title":"Welcome to Expo IAP Documentation","authors":["hyochan"],"tags":["expo-iap","in-app-purchase","react-native"],"date":"2025-06-01T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"2.6.0 - Major iOS Improvements","permalink":"/expo-iap/blog/2.6.0"}},"content":"Welcome to the official documentation site for **Expo IAP**! \ud83c\udf89\\n\\nWe\'re excited to share this comprehensive resource for developers looking to implement in-app purchases in their Expo and React Native applications.\\n\\n\x3c!-- truncate --\x3e\\n\\n## What\'s New\\n\\nThis documentation site features:\\n\\n- **\ud83d\ude80 Quick Start Guide** - Get up and running in 5 minutes\\n- **\ud83d\udcf1 Platform-specific Setup** - Detailed guides for iOS and Android\\n- **\ud83c\udfa3 useIAP Hook API** - Complete API reference with examples\\n- **\u26a0\ufe0f Error Handling** - Centralized error code management\\n- **\ud83c\udfa8 Beautiful Design** - Clean, modern interface with oatmeal theme\\n\\n## Getting Started\\n\\nReady to add in-app purchases to your app? Start with our [installation guide](/docs/installation) and follow our step-by-step setup process.\\n\\nHave questions or feedback? We\'d love to hear from you on [GitHub](https://github.com/hyochan/expo-iap)!"}]}}')}}]);