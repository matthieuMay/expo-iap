"use strict";(globalThis.webpackChunkexpo_iap_docs=globalThis.webpackChunkexpo_iap_docs||[]).push([[2069],{571:(e,n,s)=>{s.d(n,{A:()=>t});var i=s(6540),r=s(4848);function o({className:e="adfit",style:n,unit:s,height:o,width:t}){return(0,i.useEffect)(()=>{const n=setTimeout(()=>{const n=document.querySelector(`.${e}`);if(!n)return void console.warn(`AdFit: Element with class "${e}" not found`);const i=n.querySelectorAll(".kakao_ad_area"),r=n.querySelectorAll('script[src*="kas/static/ba.min.js"]');i.forEach(e=>e.remove()),r.forEach(e=>e.remove());const c=document.createElement("ins"),a=document.createElement("script");c.className="kakao_ad_area",c.style.cssText="display:none; width:100%;",a.async=!0,a.type="text/javascript",a.src="//t1.daumcdn.net/kas/static/ba.min.js",c.setAttribute("data-ad-width",t.toString()),c.setAttribute("data-ad-height",o.toString()),c.setAttribute("data-ad-unit",s),n.appendChild(c),n.appendChild(a)},100);return()=>clearTimeout(n)},[e,s,o,t]),(0,r.jsx)("div",{style:n,children:(0,r.jsx)("div",{className:e})})}function t(){return(0,r.jsx)(o,{unit:"DAN-YTmjDwlbcP42HBg6",height:100,width:320,className:"adfit-top",style:{flex:1,marginTop:24,marginBottom:24}})}},1553:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>c,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"api/methods/core-methods","title":"Core Methods","description":"This section covers the core methods available in expo-iap for managing in-app purchases.","source":"@site/versioned_docs/version-3.0/api/methods/core-methods.md","sourceDirName":"api/methods","slug":"/api/methods/core-methods","permalink":"/expo-iap/docs/3.0/api/methods/core-methods","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/expo-iap/tree/main/docs/versioned_docs/version-3.0/api/methods/core-methods.md","tags":[],"version":"3.0","sidebarPosition":1,"frontMatter":{"title":"Core Methods","sidebar_label":"Core Methods","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Types","permalink":"/expo-iap/docs/3.0/api/types"},"next":{"title":"Listeners","permalink":"/expo-iap/docs/3.0/api/methods/listeners"}}');var r=s(4848),o=s(8453),t=s(571);const c={title:"Core Methods",sidebar_label:"Core Methods",sidebar_position:1},a="Core Methods",d={},l=[{value:"Unified APIs",id:"unified-apis",level:2},{value:"initConnection()",id:"initconnection",level:2},{value:"endConnection()",id:"endconnection",level:2},{value:"fetchProducts()",id:"fetchproducts",level:2},{value:"requestPurchase()",id:"requestpurchase",level:2},{value:"Recommended usage (no Platform checks)",id:"recommended-usage-no-platform-checks",level:3},{value:"Detailed Platform Examples",id:"detailed-platform-examples",level:3},{value:"iOS Only",id:"ios-only",level:4},{value:"Android Only",id:"android-only",level:4},{value:"Important Subscription Properties",id:"important-subscription-properties",level:4},{value:"finishTransaction()",id:"finishtransaction",level:2},{value:"getAvailablePurchases()",id:"getavailablepurchases",level:2},{value:"deepLinkToSubscriptions()",id:"deeplinktosubscriptions",level:2},{value:"getStorefront()",id:"getstorefront",level:2},{value:"getActiveSubscriptions()",id:"getactivesubscriptions",level:2},{value:"hasActiveSubscriptions()",id:"hasactivesubscriptions",level:2},{value:"Purchase Interface",id:"purchase-interface",level:2},{value:"Platform-specific APIs",id:"platform-specific-apis",level:2},{value:"iOS Specific",id:"ios-specific",level:3},{value:"clearTransactionIOS()",id:"cleartransactionios",level:3},{value:"getPromotedProductIOS()",id:"getpromotedproductios",level:3},{value:"requestPurchaseOnPromotedProductIOS()",id:"requestpurchaseonpromotedproductios",level:3},{value:"getPendingTransactionsIOS()",id:"getpendingtransactionsios",level:3},{value:"isEligibleForIntroOfferIOS()",id:"iseligibleforintroofferios",level:3},{value:"subscriptionStatusIOS()",id:"subscriptionstatusios",level:3},{value:"currentEntitlementIOS()",id:"currententitlementios",level:3},{value:"latestTransactionIOS()",id:"latesttransactionios",level:3},{value:"showManageSubscriptionsIOS()",id:"showmanagesubscriptionsios",level:3},{value:"beginRefundRequestIOS()",id:"beginrefundrequestios",level:3},{value:"isTransactionVerifiedIOS()",id:"istransactionverifiedios",level:3},{value:"getTransactionJwsIOS()",id:"gettransactionjwsios",level:3},{value:"getReceiptDataIOS()",id:"getreceiptdataios",level:3},{value:"syncIOS()",id:"syncios",level:3},{value:"presentCodeRedemptionSheetIOS()",id:"presentcoderedemptionsheetios",level:3},{value:"getAppTransactionIOS()",id:"getapptransactionios",level:3},{value:"Android Specific",id:"android-specific",level:3},{value:"acknowledgePurchaseAndroid",id:"acknowledgepurchaseandroid",level:4},{value:"consumePurchaseAndroid",id:"consumepurchaseandroid",level:4},{value:"flushFailedPurchasesCachedAsPendingAndroid (Removed)",id:"flushfailedpurchasescachedaspendingandroid-removed",level:4},{value:"Removed APIs",id:"removed-apis",level:2}];function p(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"core-methods",children:"Core Methods"})}),"\n",(0,r.jsx)(t.A,{}),"\n",(0,r.jsx)(n.p,{children:"This section covers the core methods available in expo-iap for managing in-app purchases."}),"\n",(0,r.jsx)(n.p,{children:"Note: expo-iap aligns with the OpenIAP API surface. For canonical cross-SDK API docs, see:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.openiap.dev/docs/apis",children:"OpenIAP APIs"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"unified-apis",children:"Unified APIs"}),"\n",(0,r.jsx)(n.p,{children:"These cross\u2011platform methods work on both iOS and Android. For StoreKit/Play\u2011specific helpers, see the Platform\u2011specific APIs section below."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"initConnection()"})," \u2014 Initialize the store connection"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"endConnection()"})," \u2014 End the store connection and cleanup"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"fetchProducts()"})," \u2014 Fetch product and subscription metadata"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"requestPurchase()"})," \u2014 Start a purchase for products or subscriptions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"finishTransaction()"})," \u2014 Complete a transaction after validation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"getAvailablePurchases()"})," \u2014 Restore non\u2011consumables and subscriptions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"deepLinkToSubscriptions()"})," \u2014 Open native subscription management UI"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"getStorefront()"})," \u2014 Get current storefront country code"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"hasActiveSubscriptions()"})," \u2014 Check if user has active subscriptions"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"initconnection",children:"initConnection()"}),"\n",(0,r.jsx)(n.p,{children:"Initializes the connection to the store. This method must be called before any other store operations."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import {initConnection} from 'expo-iap';\n\nconst initialize = async () => {\n  try {\n    await initConnection();\n    console.log('Store connection initialized');\n  } catch (error) {\n    console.error('Failed to initialize connection:', error);\n  }\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," ",(0,r.jsx)(n.code,{children:"Promise<boolean>"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," When using the ",(0,r.jsx)(n.code,{children:"useIAP"})," hook, connection is automatically managed."]}),"\n",(0,r.jsx)(n.h2,{id:"endconnection",children:"endConnection()"}),"\n",(0,r.jsx)(n.p,{children:"Ends the connection to the store and cleans up resources."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import {endConnection} from 'expo-iap';\n\nconst cleanup = async () => {\n  try {\n    await endConnection();\n    console.log('Store connection ended');\n  } catch (error) {\n    console.error('Failed to end connection:', error);\n  }\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," ",(0,r.jsx)(n.code,{children:"Promise<void>"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," When using the ",(0,r.jsx)(n.code,{children:"useIAP"})," hook, connection cleanup is automatic."]}),"\n",(0,r.jsx)(n.h2,{id:"fetchproducts",children:"fetchProducts()"}),"\n",(0,r.jsx)(n.p,{children:"Fetches product or subscription information from the store."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import {fetchProducts} from 'expo-iap';\n\n// Fetch in-app products\nconst loadProducts = async () => {\n  try {\n    const products = await fetchProducts({\n      skus: ['com.example.product1', 'com.example.product2'],\n      type: 'in-app',\n    });\n\n    console.log('Products:', products);\n    return products;\n  } catch (error) {\n    console.error('Failed to fetch products:', error);\n  }\n};\n\n// Fetch subscriptions\nconst loadSubscriptions = async () => {\n  try {\n    const subscriptions = await fetchProducts({\n      skus: ['com.example.premium_monthly', 'com.example.premium_yearly'],\n      type: 'subs',\n    });\n\n    console.log('Subscriptions:', subscriptions);\n    return subscriptions;\n  } catch (error) {\n    console.error('Failed to fetch subscriptions:', error);\n  }\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"params"})," (object):","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"skus"})," (string[]): Array of product or subscription IDs to fetch"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"type"})," ('in-app' | 'subs'): Product type - 'in-app' for products, 'subs' for subscriptions"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," ",(0,r.jsx)(n.code,{children:"Promise<Product[]>"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/expo-iap/docs/3.0/api/types#product-types",children:(0,r.jsx)(n.strong,{children:"Product Type Overview"})})}),"\n",(0,r.jsx)(n.h2,{id:"requestpurchase",children:"requestPurchase()"}),"\n",(0,r.jsx)(n.p,{children:"Initiates a purchase request for products or subscriptions."}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\u26a0\ufe0f Platform Differences:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"iOS"}),": Can only purchase one product at a time (uses ",(0,r.jsx)(n.code,{children:"sku: string"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Android"}),": Can purchase multiple products at once (uses ",(0,r.jsx)(n.code,{children:"skus: string[]"}),")"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This exists because the iOS App Store processes purchases individually, while Google Play supports batch purchases."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"recommended-usage-no-platform-checks",children:"Recommended usage (no Platform checks)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import {requestPurchase} from 'expo-iap';\n\n// Product purchase\nconst buyProduct = async (productId: string) => {\n  try {\n    await requestPurchase({\n      request: {\n        ios: {\n          sku: productId,\n          quantity: 1,\n        },\n        android: {\n          skus: [productId],\n        },\n      },\n      type: 'in-app',\n    });\n  } catch (error) {\n    console.error('Purchase failed:', error);\n  }\n};\n\n// Subscription purchase\nconst buySubscription = async (subscriptionId: string, subscription?: any) => {\n  try {\n    await requestPurchase({\n      request: {\n        ios: {\n          sku: subscriptionId,\n          appAccountToken: 'user-123',\n        },\n        android: {\n          skus: [subscriptionId],\n          subscriptionOffers:\n            subscription?.subscriptionOfferDetails?.map((offer) => ({\n              sku: subscriptionId,\n              offerToken: offer.offerToken,\n            })) || [],\n        },\n      },\n      type: 'subs',\n    });\n  } catch (error) {\n    console.error('Subscription failed:', error);\n  }\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"detailed-platform-examples",children:"Detailed Platform Examples"}),"\n",(0,r.jsx)(n.h4,{id:"ios-only",children:"iOS Only"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"await requestPurchase({\n  request: {\n    sku: productId,\n    quantity: 1,\n    appAccountToken: 'user-account-token',\n  },\n  type: 'in-app',\n});\n"})}),"\n",(0,r.jsx)(n.h4,{id:"android-only",children:"Android Only"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"await requestPurchase({\n  request: {\n    skus: [productId],\n    obfuscatedAccountIdAndroid: 'user-account-id',\n    obfuscatedProfileIdAndroid: 'user-profile-id',\n  },\n  type: 'in-app',\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"params"})," (object):","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"request"})," (object): Purchase request configuration","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"iOS"}),": ",(0,r.jsx)(n.code,{children:"sku"})," (string) - Product ID to purchase"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Android"}),": ",(0,r.jsx)(n.code,{children:"skus"})," (string[]) - Array of product IDs to purchase"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cross-platform"}),": Include both ",(0,r.jsx)(n.code,{children:"sku"})," and ",(0,r.jsx)(n.code,{children:"skus"})," for compatibility"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"quantity?"})," (number, iOS only): Purchase quantity"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"appAccountToken?"})," (string, iOS only): User identifier for receipt validation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"obfuscatedAccountIdAndroid?"})," (string, Android only): Obfuscated account ID"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"obfuscatedProfileIdAndroid?"})," (string, Android only): Obfuscated profile ID"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"isOfferPersonalized?"})," (boolean, Android only): Whether offer is personalized"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"type?"})," ('in-app' | 'subs'): Purchase type, defaults to 'in-app'"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," ",(0,r.jsx)(n.code,{children:"Promise<Purchase | Purchase[] | void>"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," The actual purchase result is delivered through purchase listeners or the ",(0,r.jsx)(n.code,{children:"useIAP"})," hook callbacks, not as a return value."]}),"\n",(0,r.jsx)(n.h4,{id:"important-subscription-properties",children:"Important Subscription Properties"}),"\n",(0,r.jsx)(n.p,{children:"For subscription status checks after a purchase or when listing entitlements:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["iOS: Check ",(0,r.jsx)(n.code,{children:"expirationDateIOS"})," to determine if the subscription is still active"]}),"\n",(0,r.jsxs)(n.li,{children:["Android: Check ",(0,r.jsx)(n.code,{children:"autoRenewingAndroid"})," to see if auto\u2011renewal has been canceled"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"finishtransaction",children:"finishTransaction()"}),"\n",(0,r.jsx)(n.p,{children:"Completes a purchase transaction. Must be called after successful receipt validation."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import {finishTransaction} from 'expo-iap';\n\nconst completePurchase = async (purchase) => {\n  try {\n    // Validate receipt on your server first\n    const isValid = await validateReceiptOnServer(purchase);\n\n    if (isValid) {\n      // Grant purchase to user\n      await grantPurchaseToUser(purchase);\n\n      // Finish the transaction\n      await finishTransaction({\n        purchase,\n        isConsumable: true, // Set to true for consumable products\n      });\n\n      console.log('Transaction completed');\n    }\n  } catch (error) {\n    console.error('Failed to finish transaction:', error);\n  }\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"params"})," (object):","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"purchase"})," (Purchase): The purchase object to finish"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"isConsumable?"})," (boolean): Whether the product is consumable (Android)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," ",(0,r.jsx)(n.code,{children:"Promise<VoidResult | boolean>"})]}),"\n",(0,r.jsx)(n.h2,{id:"getavailablepurchases",children:"getAvailablePurchases()"}),"\n",(0,r.jsx)(n.p,{children:"Retrieves available purchases for restoration (non-consumable products and subscriptions)."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import {getAvailablePurchases} from 'expo-iap';\n\nconst restorePurchases = async () => {\n  try {\n    const purchases = await getAvailablePurchases();\n\n    for (const purchase of purchases) {\n      // Validate and restore each purchase\n      const isValid = await validateReceiptOnServer(purchase);\n      if (isValid) {\n        await grantPurchaseToUser(purchase);\n      }\n    }\n\n    console.log('Purchases restored');\n  } catch (error) {\n    console.error('Failed to restore purchases:', error);\n  }\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"options?"})," (iOS only):","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"alsoPublishToEventListenerIOS?"}),": boolean"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onlyIncludeActiveItemsIOS?"}),": boolean"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," ",(0,r.jsx)(n.code,{children:"Promise<Purchase[]>"})]}),"\n",(0,r.jsx)(n.h2,{id:"deeplinktosubscriptions",children:"deepLinkToSubscriptions()"}),"\n",(0,r.jsx)(n.p,{children:"Opens the platform-specific subscription management UI."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import {deepLinkToSubscriptions} from 'expo-iap';\n\nconst openSubscriptionSettings = () => {\n  try {\n    deepLinkToSubscriptions({skuAndroid: 'your_subscription_sku'});\n  } catch (error) {\n    console.error('Failed to open subscription settings:', error);\n  }\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," ",(0,r.jsx)(n.code,{children:"Promise<void>"})]}),"\n",(0,r.jsx)(n.h2,{id:"getstorefront",children:"getStorefront()"}),"\n",(0,r.jsx)(n.p,{children:"Return the storefront in ISO 3166-1 alpha-2 or ISO 3166-1 alpha-3 format"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import {getStorefront} from 'expo-iap';\n\nconst storeFront = await getStorefront();\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," ",(0,r.jsx)(n.code,{children:"Promise<string>"})]}),"\n",(0,r.jsx)(n.h2,{id:"getactivesubscriptions",children:"getActiveSubscriptions()"}),"\n",(0,r.jsx)(n.p,{children:"Retrieves all active subscriptions with detailed status information. This method follows the OpenIAP specification for cross-platform subscription management."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import {getActiveSubscriptions} from 'expo-iap';\n\nconst checkSubscriptions = async () => {\n  try {\n    // Get all active subscriptions\n    const allActiveSubscriptions = await getActiveSubscriptions();\n\n    // Or filter by specific subscription IDs\n    const specificSubscriptions = await getActiveSubscriptions([\n      'premium_monthly',\n      'premium_yearly',\n    ]);\n\n    for (const subscription of allActiveSubscriptions) {\n      console.log('Product ID:', subscription.productId);\n      console.log('Is Active:', subscription.isActive);\n\n      if (Platform.OS === 'ios') {\n        console.log('Expiration Date:', subscription.expirationDateIOS);\n        console.log(\n          'Days until expiration:',\n          subscription.daysUntilExpirationIOS,\n        );\n        console.log('Environment:', subscription.environmentIOS);\n      } else if (Platform.OS === 'android') {\n        console.log('Auto Renewing:', subscription.autoRenewingAndroid);\n      }\n\n      console.log('Will expire soon:', subscription.willExpireSoon);\n    }\n  } catch (error) {\n    console.error('Failed to get active subscriptions:', error);\n  }\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"subscriptionIds?"})," (string[]): Optional array of subscription product IDs to filter. If not provided, returns all active subscriptions."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," ",(0,r.jsx)(n.code,{children:"Promise<ActiveSubscription[]>"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"ActiveSubscription Interface:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface ActiveSubscription {\n  productId: string;\n  isActive: boolean;\n  expirationDateIOS?: Date;\n  autoRenewingAndroid?: boolean;\n  environmentIOS?: string;\n  willExpireSoon?: boolean;\n  daysUntilExpirationIOS?: number;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Platform Behavior:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"iOS"}),": Uses ",(0,r.jsx)(n.code,{children:"expirationDateIos"})," to determine subscription status. Includes expiration date and days until expiration."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Android"}),": Uses purchase list presence and ",(0,r.jsx)(n.code,{children:"autoRenewingAndroid"})," flag to determine status."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"hasactivesubscriptions",children:"hasActiveSubscriptions()"}),"\n",(0,r.jsx)(n.p,{children:"Checks if the user has any active subscriptions. This is a convenience method that returns a boolean result."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import {hasActiveSubscriptions} from 'expo-iap';\n\nconst checkIfUserHasSubscription = async () => {\n  try {\n    // Check if user has any active subscriptions\n    const hasAny = await hasActiveSubscriptions();\n\n    // Or check for specific subscriptions\n    const hasPremium = await hasActiveSubscriptions([\n      'premium_monthly',\n      'premium_yearly',\n    ]);\n\n    if (hasAny) {\n      console.log('User has active subscriptions');\n    }\n\n    if (hasPremium) {\n      console.log('User has premium subscription');\n    }\n  } catch (error) {\n    console.error('Failed to check subscription status:', error);\n  }\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"subscriptionIds?"})," (string[]): Optional array of subscription product IDs to check. If not provided, checks all subscriptions."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," ",(0,r.jsx)(n.code,{children:"Promise<boolean>"})," - Returns true if user has at least one active subscription"]}),"\n",(0,r.jsx)(n.h2,{id:"purchase-interface",children:"Purchase Interface"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"interface Purchase {\n  id: string; // Transaction identifier\n  productId: string;\n  transactionDate: number;\n  purchaseToken?: string; // Unified token (iOS JWS or Android token)\n\n  // iOS-specific properties\n  originalTransactionDateIOS?: number;\n  originalTransactionIdentifierIOS?: string;\n  expirationDateIOS?: number;\n  environmentIOS?: 'Production' | 'Sandbox';\n\n  // Android-specific properties\n  dataAndroid?: string;\n  signatureAndroid?: string;\n  purchaseStateAndroid?: number;\n  isAcknowledgedAndroid?: boolean;\n  packageNameAndroid?: string;\n  developerPayloadAndroid?: string;\n  obfuscatedAccountIdAndroid?: string;\n  obfuscatedProfileIdAndroid?: string;\n  autoRenewingAndroid?: boolean;\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"platform-specific-apis",children:"Platform-specific APIs"}),"\n",(0,r.jsx)(n.h3,{id:"ios-specific",children:"iOS Specific"}),"\n",(0,r.jsx)(n.p,{children:"The following iOS\u2011only helpers expose StoreKit and App Store specific capabilities. Most day\u2011to\u2011day flows are covered by the cross\u2011platform Core Methods above; use these only when you need iOS features."}),"\n",(0,r.jsx)(n.h3,{id:"cleartransactionios",children:"clearTransactionIOS()"}),"\n",(0,r.jsx)(n.p,{children:"Clears all pending transactions from the iOS payment queue. Useful if your app previously crashed or missed finishing transactions."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import {clearTransactionIOS, getPendingTransactionsIOS} from 'expo-iap';\n\n// Inspect then clear\nconst pending = await getPendingTransactionsIOS();\nif (pending.length) {\n  await clearTransactionIOS();\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Returns: ",(0,r.jsx)(n.code,{children:"Promise<void>"})]}),"\n",(0,r.jsx)(n.h3,{id:"getpromotedproductios",children:"getPromotedProductIOS()"}),"\n",(0,r.jsx)(n.p,{children:"Gets the currently promoted product, if any. Requires iOS 11+."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import {getPromotedProductIOS} from 'expo-iap';\n\nconst promoted = await getPromotedProductIOS();\nif (promoted) {\n  // Show your purchase UI for the promoted product\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Returns: ",(0,r.jsx)(n.code,{children:"Promise<Product | null>"})]}),"\n",(0,r.jsx)(n.h3,{id:"requestpurchaseonpromotedproductios",children:"requestPurchaseOnPromotedProductIOS()"}),"\n",(0,r.jsx)(n.p,{children:"Initiates the purchase flow for the currently promoted product. Requires iOS 11+."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import {requestPurchaseOnPromotedProductIOS} from 'expo-iap';\n\nawait requestPurchaseOnPromotedProductIOS();\n// Purchase result is delivered via purchase listeners/useIAP callbacks\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Returns: ",(0,r.jsx)(n.code,{children:"Promise<void>"})]}),"\n",(0,r.jsx)(n.h3,{id:"getpendingtransactionsios",children:"getPendingTransactionsIOS()"}),"\n",(0,r.jsx)(n.p,{children:"Returns all transactions that are pending completion in the StoreKit payment queue."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import {getPendingTransactionsIOS} from 'expo-iap';\n\nconst pending = await getPendingTransactionsIOS();\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Returns: ",(0,r.jsx)(n.code,{children:"Promise<Purchase[]>"})]}),"\n",(0,r.jsx)(n.h3,{id:"iseligibleforintroofferios",children:"isEligibleForIntroOfferIOS()"}),"\n",(0,r.jsx)(n.p,{children:"Checks if the user is eligible for an introductory offer for a subscription group. Requires iOS 12.2+."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import {isEligibleForIntroOfferIOS, fetchProducts} from 'expo-iap';\n\n// Example: derive group ID from a fetched subscription product\nconst [sub] = await fetchProducts({skus: ['your_sub_sku'], type: 'subs'});\nconst groupId = sub?.subscriptionInfoIOS?.subscriptionGroupId ?? '';\nconst eligible = groupId ? await isEligibleForIntroOfferIOS(groupId) : false;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Returns: ",(0,r.jsx)(n.code,{children:"Promise<boolean>"})]}),"\n",(0,r.jsx)(n.h3,{id:"subscriptionstatusios",children:"subscriptionStatusIOS()"}),"\n",(0,r.jsx)(n.p,{children:"Returns detailed subscription status information using StoreKit 2. Requires iOS 15+."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import {subscriptionStatusIOS} from 'expo-iap';\n\nconst statuses = await subscriptionStatusIOS('your_sub_sku');\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Returns: ",(0,r.jsx)(n.code,{children:"Promise<SubscriptionStatusIOS[]>"})]}),"\n",(0,r.jsx)(n.h3,{id:"currententitlementios",children:"currentEntitlementIOS()"}),"\n",(0,r.jsx)(n.p,{children:"Returns the current entitlement for a given SKU using StoreKit 2. Requires iOS 15+."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import {currentEntitlementIOS} from 'expo-iap';\n\nconst entitlement = await currentEntitlementIOS('your_sub_or_product_sku');\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Returns: ",(0,r.jsx)(n.code,{children:"Promise<Purchase | null>"})]}),"\n",(0,r.jsx)(n.h3,{id:"latesttransactionios",children:"latestTransactionIOS()"}),"\n",(0,r.jsx)(n.p,{children:"Returns the most recent transaction for a given SKU using StoreKit 2. Requires iOS 15+."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import {latestTransactionIOS} from 'expo-iap';\n\nconst last = await latestTransactionIOS('your_sku');\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Returns: ",(0,r.jsx)(n.code,{children:"Promise<Purchase | null>"})]}),"\n",(0,r.jsx)(n.h3,{id:"showmanagesubscriptionsios",children:"showManageSubscriptionsIOS()"}),"\n",(0,r.jsx)(n.p,{children:"Opens the native subscription management interface and returns purchases for subscriptions whose auto\u2011renewal status changed while the sheet was open. Requires iOS 15+."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import {showManageSubscriptionsIOS} from 'expo-iap';\n\nconst changed = await showManageSubscriptionsIOS();\nif (changed.length > 0) {\n  // Update your UI / server using returned purchases\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Returns: ",(0,r.jsx)(n.code,{children:"Promise<Purchase[]>"})]}),"\n",(0,r.jsx)(n.h3,{id:"beginrefundrequestios",children:"beginRefundRequestIOS()"}),"\n",(0,r.jsx)(n.p,{children:"Presents the refund request sheet for a specific SKU. Requires iOS 15+."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import {beginRefundRequestIOS} from 'expo-iap';\n\nconst status = await beginRefundRequestIOS('your_sku');\n// status: 'success' | 'userCancelled'\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Returns: ",(0,r.jsx)(n.code,{children:"Promise<'success' | 'userCancelled'>"})]}),"\n",(0,r.jsx)(n.h3,{id:"istransactionverifiedios",children:"isTransactionVerifiedIOS()"}),"\n",(0,r.jsx)(n.p,{children:"Verifies the latest transaction for a given SKU using StoreKit 2. Requires iOS 15+."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import {isTransactionVerifiedIOS} from 'expo-iap';\n\nconst ok = await isTransactionVerifiedIOS('your_sku');\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Returns: ",(0,r.jsx)(n.code,{children:"Promise<boolean>"})]}),"\n",(0,r.jsx)(n.h3,{id:"gettransactionjwsios",children:"getTransactionJwsIOS()"}),"\n",(0,r.jsx)(n.p,{children:"Returns the JSON Web Signature (JWS) for a transaction derived from a given SKU. Use this for server\u2011side validation. Requires iOS 15+."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import {getTransactionJwsIOS} from 'expo-iap';\n\nconst jws = await getTransactionJwsIOS('your_sku');\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Returns: ",(0,r.jsx)(n.code,{children:"Promise<string>"})]}),"\n",(0,r.jsx)(n.h3,{id:"getreceiptdataios",children:"getReceiptDataIOS()"}),"\n",(0,r.jsx)(n.p,{children:"Returns the base64\u2011encoded receipt data for server validation."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import {getReceiptDataIOS} from 'expo-iap';\n\nconst receipt = await getReceiptDataIOS();\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Returns: ",(0,r.jsx)(n.code,{children:"Promise<string>"})]}),"\n",(0,r.jsx)(n.h3,{id:"syncios",children:"syncIOS()"}),"\n",(0,r.jsx)(n.p,{children:"Forces a sync with StoreKit to ensure all transactions are up to date. Requires iOS 15+."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import {syncIOS} from 'expo-iap';\n\nawait syncIOS();\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Returns: ",(0,r.jsx)(n.code,{children:"Promise<void>"})]}),"\n",(0,r.jsx)(n.h3,{id:"presentcoderedemptionsheetios",children:"presentCodeRedemptionSheetIOS()"}),"\n",(0,r.jsx)(n.p,{children:"Presents the system sheet for redeeming App Store promo/offer codes."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import {presentCodeRedemptionSheetIOS} from 'expo-iap';\n\nawait presentCodeRedemptionSheetIOS();\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Returns: ",(0,r.jsx)(n.code,{children:"Promise<boolean>"})]}),"\n",(0,r.jsx)(n.h3,{id:"getapptransactionios",children:"getAppTransactionIOS()"}),"\n",(0,r.jsx)(n.p,{children:"Gets app transaction information for iOS apps (iOS 16.0+). AppTransaction represents the initial purchase that unlocked the app, useful for premium apps or apps that were previously paid."}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Runtime: iOS 16.0+; Build: Xcode 15.0+ with iOS 16.0 SDK. Older SDKs will throw."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import {getAppTransactionIOS} from 'expo-iap';\n\nconst fetchAppTransaction = async () => {\n  try {\n    const appTransaction = await getAppTransactionIOS();\n    if (appTransaction) {\n      console.log('App Transaction ID:', appTransaction.appTransactionId);\n      console.log(\n        'Original Purchase Date:',\n        new Date(appTransaction.originalPurchaseDate),\n      );\n      console.log('Device Verification:', appTransaction.deviceVerification);\n    }\n  } catch (error) {\n    console.error('Failed to get app transaction:', error);\n  }\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," ",(0,r.jsx)(n.code,{children:"Promise<AppTransaction | null>"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface AppTransaction {\n  appTransactionId?: string; // iOS 18.4+\n  originalPlatform?: string; // iOS 18.4+\n  bundleId: string;\n  appVersion: string;\n  originalAppVersion: string;\n  originalPurchaseDate: number; // ms since epoch\n  deviceVerification: string;\n  deviceVerificationNonce: string;\n  environment: string;\n  signedDate: number;\n  appId?: number;\n  appVersionId?: number;\n  preorderDate?: number;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"android-specific",children:"Android Specific"}),"\n",(0,r.jsx)(n.h4,{id:"acknowledgepurchaseandroid",children:"acknowledgePurchaseAndroid"}),"\n",(0,r.jsx)(n.p,{children:"Acknowledge a non\u2011consumable purchase or subscription on Android."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import {acknowledgePurchaseAndroid} from 'expo-iap';\n\nawait acknowledgePurchaseAndroid({token: purchase.purchaseToken!});\n"})}),"\n",(0,r.jsx)(n.p,{children:"Notes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["finishTransaction() calls this automatically when ",(0,r.jsx)(n.code,{children:"isConsumable"})," is false. You typically do not need to call it directly."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"consumepurchaseandroid",children:"consumePurchaseAndroid"}),"\n",(0,r.jsx)(n.p,{children:"Consume a purchase (consumables only). This marks an item as consumed so it can be purchased again."}),"\n",(0,r.jsx)(n.p,{children:"Notes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["finishTransaction() calls Android consumption automatically when ",(0,r.jsx)(n.code,{children:"isConsumable"})," is true."]}),"\n",(0,r.jsx)(n.li,{children:"A direct JS helper is not exposed; consumption is handled internally via the native module."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"flushfailedpurchasescachedaspendingandroid-removed",children:"flushFailedPurchasesCachedAsPendingAndroid (Removed)"}),"\n",(0,r.jsx)(n.p,{children:"This legacy helper from older libraries has been removed. The modern flow is:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// On app startup (Android)\nconst purchases = await getAvailablePurchases();\n\nfor (const p of purchases) {\n  if (/* consumable */) {\n    // finishTransaction will consume on Android when isConsumable is true\n    await finishTransaction({ purchase: p, isConsumable: true });\n  } else {\n    // finishTransaction will acknowledge on Android when isConsumable is false\n    await finishTransaction({ purchase: p, isConsumable: false });\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"This ensures pending transactions are surfaced and properly resolved without a separate \u201cflush\u201d API."}),"\n",(0,r.jsx)(n.h2,{id:"removed-apis",children:"Removed APIs"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"requestProducts()"})," \u2014 Removed in v3.0.0. Use ",(0,r.jsx)(n.code,{children:"fetchProducts({ skus, type })"})," instead."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var i=s(6540);const r={},o=i.createContext(r);function t(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);