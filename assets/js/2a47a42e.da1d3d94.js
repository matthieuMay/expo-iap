"use strict";(globalThis.webpackChunkexpo_iap_docs=globalThis.webpackChunkexpo_iap_docs||[]).push([[8171],{571:(e,n,i)=>{i.d(n,{A:()=>t});var s=i(6540),r=i(4848);function a({className:e="adfit",style:n,unit:i,height:a,width:t}){return(0,s.useEffect)(()=>{const n=setTimeout(()=>{const n=document.querySelector(`.${e}`);if(!n)return void console.warn(`AdFit: Element with class "${e}" not found`);const s=n.querySelectorAll(".kakao_ad_area"),r=n.querySelectorAll('script[src*="kas/static/ba.min.js"]');s.forEach(e=>e.remove()),r.forEach(e=>e.remove());const o=document.createElement("ins"),l=document.createElement("script");o.className="kakao_ad_area",o.style.cssText="display:none; width:100%;",l.async=!0,l.type="text/javascript",l.src="//t1.daumcdn.net/kas/static/ba.min.js",o.setAttribute("data-ad-width",t.toString()),o.setAttribute("data-ad-height",a.toString()),o.setAttribute("data-ad-unit",i),n.appendChild(o),n.appendChild(l)},100);return()=>clearTimeout(n)},[e,i,a,t]),(0,r.jsx)("div",{style:n,children:(0,r.jsx)("div",{className:e})})}function t(){return(0,r.jsx)(a,{unit:"DAN-YTmjDwlbcP42HBg6",height:100,width:320,className:"adfit-top",style:{flex:1,marginTop:24,marginBottom:24}})}},879:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var s=i(937),r=i(4848),a=i(8453),t=i(571);const o={slug:"2.7.0",title:"2.7.0 - New Platform API & Google Play Billing v8",authors:["hyochan"],tags:["release","api","breaking-changes","android","google-play-billing"],date:new Date("2025-07-23T00:00:00.000Z")},l="2.7.0 - New Platform API & Google Play Billing v8",c={authorsImageUrls:[void 0]},d=[{value:"\ud83c\udfaf New Platform-Specific API",id:"-new-platform-specific-api",level:2},{value:"The Problem",id:"the-problem",level:3},{value:"The Solution: Platform-Specific Parameters",id:"the-solution-platform-specific-parameters",level:3},{value:"Key Benefits",id:"key-benefits",level:3},{value:"Migration Examples",id:"migration-examples",level:3},{value:"Basic Product Purchase",id:"basic-product-purchase",level:4},{value:"Subscription Purchase",id:"subscription-purchase",level:4},{value:"Platform-Specific Parameters",id:"platform-specific-parameters",level:3},{value:"iOS Parameters",id:"ios-parameters",level:4},{value:"Android Parameters",id:"android-parameters",level:4},{value:"\ud83d\udd04 Deprecation Notice: requestSubscription",id:"-deprecation-notice-requestsubscription",level:2},{value:"\ud83e\udd16 Google Play Billing Library v8.0.0 Support",id:"-google-play-billing-library-v800-support",level:2},{value:"Key Changes",id:"key-changes",level:3},{value:"1. Updated Dependencies",id:"1-updated-dependencies",level:4},{value:"2. Removed Deprecated Methods",id:"2-removed-deprecated-methods",level:4},{value:"3. Automatic Service Reconnection",id:"3-automatic-service-reconnection",level:4},{value:"4. Sub-Response Codes",id:"4-sub-response-codes",level:4},{value:"Breaking Changes Summary",id:"breaking-changes-summary",level:3},{value:"Migration Guide for getPurchaseHistory",id:"migration-guide-for-getpurchasehistory",level:3},{value:"\ud83d\ude80 Best Practices",id:"-best-practices",level:2},{value:"\ud83d\udce6 Upgrading",id:"-upgrading",level:2},{value:"Requirements",id:"requirements",level:3},{value:"\ud83c\udf89 Benefits",id:"-benefits",level:2},{value:"\ud83d\udcda Documentation",id:"-documentation",level:2},{value:"\ud83d\udcac Feedback",id:"-feedback",level:2},{value:"2.6.3 \u2014 iOS AppTransaction Support",id:"263--ios-apptransaction-support",level:2},{value:"What&#39;s New",id:"whats-new",level:3},{value:"Key Properties Added",id:"key-properties-added",level:3},{value:"Usage Example",id:"usage-example",level:3}];function p(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"We're excited to announce expo-iap 2.7.0! This release includes a cleaner platform-specific API for handling purchases and full support for Google Play Billing Library v8.0.0."}),"\n","\n",(0,r.jsx)(t.A,{}),"\n",(0,r.jsx)(n.h2,{id:"-new-platform-specific-api",children:"\ud83c\udfaf New Platform-Specific API"}),"\n",(0,r.jsx)(n.h3,{id:"the-problem",children:"The Problem"}),"\n",(0,r.jsx)(n.p,{children:"Previously, developers had to write conditional logic to handle platform differences:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"// Old approach - requires platform checks\nif (Platform.OS === 'ios') {\n  await requestPurchase({\n    request: {sku: productId},\n  });\n} else {\n  await requestPurchase({\n    request: {skus: [productId]},\n  });\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"This approach had several issues:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Required manual platform checks"}),"\n",(0,r.jsx)(n.li,{children:"Easy to miss platform-specific parameters"}),"\n",(0,r.jsx)(n.li,{children:"TypeScript couldn't provide proper platform-specific type hints"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"the-solution-platform-specific-parameters",children:"The Solution: Platform-Specific Parameters"}),"\n",(0,r.jsx)(n.p,{children:"The new API introduces a cleaner structure with explicit platform parameters:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"// New approach - clear platform separation\nawait requestPurchase({\n  request: {\n    ios: {\n      sku: productId,\n      appAccountToken: 'user-123',\n    },\n    android: {\n      skus: [productId],\n      obfuscatedAccountIdAndroid: 'user-123',\n    },\n  },\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"key-benefits",children:"Key Benefits"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Better Type Safety"}),": TypeScript now provides accurate autocompletion for each platform's specific parameters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Clearer Code Structure"}),": Platform-specific logic is clearly separated"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Backward Compatibility"}),": The old API still works, so you can migrate at your own pace"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"migration-examples",children:"Migration Examples"}),"\n",(0,r.jsx)(n.h4,{id:"basic-product-purchase",children:"Basic Product Purchase"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Before:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"const buyProduct = async (productId: string) => {\n  if (Platform.OS === 'ios') {\n    await requestPurchase({\n      request: {sku: productId},\n    });\n  } else {\n    await requestPurchase({\n      request: {skus: [productId]},\n    });\n  }\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"After:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"const buyProduct = async (productId: string) => {\n  await requestPurchase({\n    request: {\n      ios: {sku: productId},\n      android: {skus: [productId]},\n    },\n  });\n};\n"})}),"\n",(0,r.jsx)(n.h4,{id:"subscription-purchase",children:"Subscription Purchase"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Before:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"const buySubscription = async (subId: string) => {\n  if (Platform.OS === 'ios') {\n    await requestPurchase({\n      request: {\n        sku: subId,\n        appAccountToken: 'user-123',\n      },\n      type: 'subs',\n    });\n  } else {\n    const subscription = subscriptions.find((s) => s.id === subId);\n    const offer = subscription?.subscriptionOfferDetails?.[0];\n\n    await requestPurchase({\n      request: {\n        skus: [subId],\n        subscriptionOffers: [\n          {\n            sku: subId,\n            offerToken: offer?.offerToken || '',\n          },\n        ],\n      },\n      type: 'subs',\n    });\n  }\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"After:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"const buySubscription = async (subId: string) => {\n  const subscription = subscriptions.find((s) => s.id === subId);\n\n  await requestPurchase({\n    request: {\n      ios: {\n        sku: subId,\n        appAccountToken: 'user-123',\n      },\n      android: {\n        skus: [subId],\n        subscriptionOffers:\n          subscription?.subscriptionOfferDetails?.map((offer) => ({\n            sku: subId,\n            offerToken: offer.offerToken,\n          })) || [],\n      },\n    },\n    type: 'subs',\n  });\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"platform-specific-parameters",children:"Platform-Specific Parameters"}),"\n",(0,r.jsx)(n.h4,{id:"ios-parameters",children:"iOS Parameters"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"{\n  ios: {\n    sku: string;                                        // Required: Product SKU\n    andDangerouslyFinishTransactionAutomatically?: boolean;\n    appAccountToken?: string;                           // For server validation\n    quantity?: number;                                  // For bulk purchases\n    withOffer?: PaymentDiscount;                        // For discounts\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"android-parameters",children:"Android Parameters"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"{\n  android: {\n    skus: string[];                                     // Required: Product SKUs\n    obfuscatedAccountIdAndroid?: string;                // User identifier\n    obfuscatedProfileIdAndroid?: string;                // Profile identifier\n    isOfferPersonalized?: boolean;                      // For personalized pricing\n\n    // For subscriptions only:\n    subscriptionOffers?: Array<{\n      sku: string;\n      offerToken: string;\n    }>;\n    purchaseTokenAndroid?: string;                      // For upgrades/downgrades\n    replacementModeAndroid?: number;                    // Proration mode\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-deprecation-notice-requestsubscription",children:"\ud83d\udd04 Deprecation Notice: requestSubscription"}),"\n",(0,r.jsxs)(n.p,{children:["Starting from 2.7.0, ",(0,r.jsx)(n.code,{children:"requestSubscription"})," is deprecated in favor of using ",(0,r.jsx)(n.code,{children:"requestPurchase"})," with ",(0,r.jsx)(n.code,{children:"type: 'subs'"}),". This unifies our API and makes the codebase cleaner."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Migration example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"// Old way (deprecated)\nawait requestSubscription({\n  sku: subscriptionId,\n  skus: [subscriptionId],\n});\n\n// New way (recommended)\nawait requestPurchase({\n  request: {\n    ios: {sku: subscriptionId},\n    android: {skus: [subscriptionId]},\n  },\n  type: 'subs',\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-google-play-billing-library-v800-support",children:"\ud83e\udd16 Google Play Billing Library v8.0.0 Support"}),"\n",(0,r.jsxs)(n.p,{children:["We've updated to Google Play Billing Library v8.0.0 to meet Google Play's latest requirements. For more details on the migration, see ",(0,r.jsx)(n.a,{href:"https://developer.android.com/google/play/billing/migrate-gpblv8",children:"Google's official migration guide"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"key-changes",children:"Key Changes"}),"\n",(0,r.jsx)(n.h4,{id:"1-updated-dependencies",children:"1. Updated Dependencies"}),"\n",(0,r.jsx)(n.p,{children:"The Android module now uses the latest Google Play Billing Library:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-gradle",children:'implementation "com.android.billingclient:billing-ktx:8.0.0"\n'})}),"\n",(0,r.jsx)(n.h4,{id:"2-removed-deprecated-methods",children:"2. Removed Deprecated Methods"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"getPurchaseHistory is no longer available on Android"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Google Play Billing Library v8 has removed the ",(0,r.jsx)(n.code,{children:"queryPurchaseHistoryAsync()"})," method. The ",(0,r.jsx)(n.code,{children:"getPurchaseHistories()"})," function will now return an empty array on Android with a console warning:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Before v8\nconst history = await getPurchaseHistories(); // Returns purchase history\n\n// After v8\nconst history = await getPurchaseHistories(); // Returns [] on Android with warning\n// Use getAvailablePurchases() instead for active purchases\n"})}),"\n",(0,r.jsx)(n.h4,{id:"3-automatic-service-reconnection",children:"3. Automatic Service Reconnection"}),"\n",(0,r.jsx)(n.p,{children:"The library now includes automatic service reconnection support, improving reliability when the billing service disconnects unexpectedly."}),"\n",(0,r.jsx)(n.h4,{id:"4-sub-response-codes",children:"4. Sub-Response Codes"}),"\n",(0,r.jsx)(n.p,{children:"The library now provides more detailed error information through sub-response codes:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Error object now includes sub-response codes\n{\n  responseCode: 6, // ERROR\n  debugMessage: "Error processing purchase",\n  subResponseCode: 1, // PAYMENT_DECLINED_DUE_TO_INSUFFICIENT_FUNDS\n  subResponseMessage: "Payment declined due to insufficient funds"\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"breaking-changes-summary",children:"Breaking Changes Summary"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:"getPurchaseHistory()"})," removed"]})," - Use ",(0,r.jsx)(n.code,{children:"getAvailablePurchases()"})," instead"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:"querySkuDetailsAsync()"})," removed"]})," - Already migrated to ",(0,r.jsx)(n.code,{children:"queryProductDetailsAsync()"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:"enablePendingPurchases()"})," signature changed"]})," - Now requires ",(0,r.jsx)(n.code,{children:"PendingPurchasesParams"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:"queryPurchasesAsync(skuType)"})," removed"]})," - Use ",(0,r.jsx)(n.code,{children:"queryPurchasesAsync(QueryPurchasesParams)"})," instead"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"migration-guide-for-getpurchasehistory",children:"Migration Guide for getPurchaseHistory"}),"\n",(0,r.jsxs)(n.p,{children:["If you're using ",(0,r.jsx)(n.code,{children:"getPurchaseHistory()"})," or ",(0,r.jsx)(n.code,{children:"getPurchaseHistories()"})," on Android:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Old approach\nconst history = await getPurchaseHistories();\n\n// New approach - use getAvailablePurchases for active purchases\nconst activePurchases = await getAvailablePurchases();\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-best-practices",children:"\ud83d\ude80 Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Handle Platform Availability"}),": Not all parameters need to be set for both platforms"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"await requestPurchase({\n  request: {\n    ios: {sku: productId},\n    android: {skus: [productId]},\n  },\n});\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Use TypeScript"}),": Let TypeScript guide you with autocompletion"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"await requestPurchase({\n  request: {\n    ios: {\n      // TypeScript will show iOS-specific options\n    },\n    android: {\n      // TypeScript will show Android-specific options\n    },\n  },\n});\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Gradual Migration"}),": The old API still works, migrate at your own pace"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"-upgrading",children:"\ud83d\udce6 Upgrading"}),"\n",(0,r.jsx)(n.p,{children:"To upgrade to version 2.7.0:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install expo-iap@2.7.0\n# or\nyarn add expo-iap@2.7.0\n# or\nbun add expo-iap@2.7.0\n"})}),"\n",(0,r.jsx)(n.h3,{id:"requirements",children:"Requirements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Android Gradle Plugin 4.0 or higher"}),"\n",(0,r.jsx)(n.li,{children:"Kotlin 1.6 or higher"}),"\n",(0,r.jsx)(n.li,{children:"JVM target 17 (automatically configured)"}),"\n",(0,r.jsx)(n.li,{children:"Google Play's latest billing requirements (deadline: August 31, 2025)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"-benefits",children:"\ud83c\udf89 Benefits"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cleaner Code"}),": No more Platform.OS checks in your purchase logic"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Better Type Safety"}),": Platform-specific TypeScript hints"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Future-Proof"}),": Compliance with Google Play's latest requirements"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Improved Reliability"}),": Automatic service reconnection on Android"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Enhanced Error Handling"}),": Detailed sub-response codes"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"-documentation",children:"\ud83d\udcda Documentation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Check our ",(0,r.jsx)(n.a,{href:"/docs/guides/purchases",children:"updated documentation"})]}),"\n",(0,r.jsxs)(n.li,{children:["View ",(0,r.jsx)(n.a,{href:"https://github.com/hyochan/expo-iap/tree/main/example",children:"complete examples"})]}),"\n",(0,r.jsxs)(n.li,{children:["Join our ",(0,r.jsx)(n.a,{href:"https://github.com/hyochan/expo-iap/discussions",children:"community discussions"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"-feedback",children:"\ud83d\udcac Feedback"}),"\n",(0,r.jsxs)(n.p,{children:["If you encounter any issues with this update, please ",(0,r.jsx)(n.a,{href:"https://github.com/hyochan/expo-iap/issues",children:"open an issue"})," on our GitHub repository."]}),"\n",(0,r.jsx)(n.p,{children:"Happy coding! \ud83d\ude80"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"263--ios-apptransaction-support",children:"2.6.3 \u2014 iOS AppTransaction Support"}),"\n",(0,r.jsx)(n.p,{children:"We're excited to highlight the 2.6.3 update that shipped critical fixes and full coverage for iOS AppTransaction (StoreKit 2) properties."}),"\n",(0,r.jsx)(n.h3,{id:"whats-new",children:"What's New"}),"\n",(0,r.jsxs)(n.p,{children:["Complete AppTransaction properties are now returned by ",(0,r.jsx)(n.code,{children:"getAppTransactionIOS()"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"export type AppTransactionIOS = {\n  appTransactionID: string;\n  bundleID: string;\n  appVersion: string;\n  originalAppVersion: string;\n  originalPurchaseDate: number;\n  deviceVerification: string;\n  deviceVerificationNonce: string;\n  environment: string;\n  signedDate: number;\n  appID?: number;\n  appVersionID?: number;\n  originalPlatform: string;\n  preorderDate?: number;\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"key-properties-added",children:"Key Properties Added"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"appTransactionID"}),": The unique identifier for the app transaction"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"environment"}),": Indicates whether the transaction occurred in Production, Sandbox, or Xcode environment"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"signedDate"}),": The date when the transaction was signed"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"appID"})," and ",(0,r.jsx)(n.code,{children:"appVersionID"}),": App Store identifiers for the app and version"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"originalPlatform"}),": The platform where the app was originally purchased"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"preorderDate"}),": Available when the app was pre-ordered"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"usage-example",children:"Usage Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import {getAppTransactionIOS} from 'expo-iap';\n\nconst getAppPurchaseInfo = async () => {\n  try {\n    const appTransaction = await getAppTransactionIOS();\n\n    console.log('App Transaction ID:', appTransaction.appTransactionID);\n    console.log('Environment:', appTransaction.environment);\n    console.log(\n      'Original Purchase Date:',\n      new Date(appTransaction.originalPurchaseDate),\n    );\n\n    // Check if app was pre-ordered\n    if (appTransaction.preorderDate) {\n      console.log('Pre-order Date:', new Date(appTransaction.preorderDate));\n    }\n  } catch (error) {\n    console.error('Failed to get app transaction:', error);\n  }\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Note: In 2.8.0, these fields were renamed to use the unified ",(0,r.jsx)(n.code,{children:"Id"})," casing (for example, ",(0,r.jsx)(n.code,{children:"appTransactionId"}),", ",(0,r.jsx)(n.code,{children:"bundleId"}),", ",(0,r.jsx)(n.code,{children:"appVersionId"}),"). See the 2.8.0 migration guide for details."]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},937:e=>{e.exports=JSON.parse('{"permalink":"/expo-iap/blog/2.7.0","editUrl":"https://github.com/hyochan/expo-iap/tree/main/docs/blog/2025-07-23-2.7.0.md","source":"@site/blog/2025-07-23-2.7.0.md","title":"2.7.0 - New Platform API & Google Play Billing v8","description":"We\'re excited to announce expo-iap 2.7.0! This release includes a cleaner platform-specific API for handling purchases and full support for Google Play Billing Library v8.0.0.","date":"2025-07-23T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/expo-iap/blog/tags/release","description":"New version releases and updates"},{"inline":false,"label":"API","permalink":"/expo-iap/blog/tags/api","description":"API updates and changes"},{"inline":false,"label":"Breaking Changes","permalink":"/expo-iap/blog/tags/breaking-changes","description":"Updates that require code changes"},{"inline":false,"label":"Android","permalink":"/expo-iap/blog/tags/android","description":"Android platform specific features"},{"inline":false,"label":"Google Play Billing","permalink":"/expo-iap/blog/tags/google-play-billing","description":"Google Play Billing Library updates"}],"readingTime":5.38,"hasTruncateMarker":true,"authors":[{"name":"Hyo","title":"Expo IAP Maintainer","url":"https://github.com/hyochan","page":{"permalink":"/expo-iap/blog/authors/hyochan"},"socials":{"github":"https://github.com/hyochan","linkedin":"https://www.linkedin.com/in/hyochanjang/","x":"https://x.com/hyodotdev"},"imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"2.7.0","title":"2.7.0 - New Platform API & Google Play Billing v8","authors":["hyochan"],"tags":["release","api","breaking-changes","android","google-play-billing"],"date":"2025-07-23T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"2.8.0 Migration Guide - iOS Field Naming Convention Update","permalink":"/expo-iap/blog/2.8.0-migration-guide"},"nextItem":{"title":"2.6.0 - Major iOS Improvements","permalink":"/expo-iap/blog/2.6.0"}}')},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>o});var s=i(6540);const r={},a=s.createContext(r);function t(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);