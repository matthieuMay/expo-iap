"use strict";(globalThis.webpackChunkexpo_iap_docs=globalThis.webpackChunkexpo_iap_docs||[]).push([[7280],{571:(e,n,s)=>{s.d(n,{A:()=>c});var r=s(6540),i=s(4848);function t({className:e="adfit",style:n,unit:s,height:t,width:c}){return(0,r.useEffect)(()=>{const n=setTimeout(()=>{const n=document.querySelector(`.${e}`);if(!n)return void console.warn(`AdFit: Element with class "${e}" not found`);const r=n.querySelectorAll(".kakao_ad_area"),i=n.querySelectorAll('script[src*="kas/static/ba.min.js"]');r.forEach(e=>e.remove()),i.forEach(e=>e.remove());const o=document.createElement("ins"),a=document.createElement("script");o.className="kakao_ad_area",o.style.cssText="display:none; width:100%;",a.async=!0,a.type="text/javascript",a.src="//t1.daumcdn.net/kas/static/ba.min.js",o.setAttribute("data-ad-width",c.toString()),o.setAttribute("data-ad-height",t.toString()),o.setAttribute("data-ad-unit",s),n.appendChild(o),n.appendChild(a)},100);return()=>clearTimeout(n)},[e,s,t,c]),(0,i.jsx)("div",{style:n,children:(0,i.jsx)("div",{className:e})})}function c(){return(0,i.jsx)(t,{unit:"DAN-YTmjDwlbcP42HBg6",height:100,width:320,className:"adfit-top",style:{flex:1,marginTop:24,marginBottom:24}})}},5931:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"examples/subscription-flow","title":"Subscriptions Flow Example","description":"This guide demonstrates common subscription scenarios using expo-iap. For the complete implementation, see example/app/subscription-flow.tsx.","source":"@site/docs/examples/subscription-flow.md","sourceDirName":"examples","slug":"/examples/subscription-flow","permalink":"/expo-iap/docs/examples/subscription-flow","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/expo-iap/tree/main/docs/docs/examples/subscription-flow.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Subscriptions Flow Example","sidebar_label":"Subscriptions Flow","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Purchase Flow","permalink":"/expo-iap/docs/examples/purchase-flow"},"next":{"title":"Available Purchases","permalink":"/expo-iap/docs/examples/available-purchases"}}');var i=s(4848),t=s(8453),c=s(571);const o={title:"Subscriptions Flow Example",sidebar_label:"Subscriptions Flow",sidebar_position:2},a="Subscriptions Flow",l={},u=[{value:"Overview",id:"overview",level:2},{value:"Flow Overview",id:"flow-overview",level:2},{value:"1. Purchasing a Subscription with requestPurchase",id:"1-purchasing-a-subscription-with-requestpurchase",level:2},{value:"Basic Subscription Purchase",id:"basic-subscription-purchase",level:3},{value:"Handling Purchase Success with Hook Callbacks",id:"handling-purchase-success-with-hook-callbacks",level:3},{value:"2. Checking Subscription Status with getActiveSubscriptions",id:"2-checking-subscription-status-with-getactivesubscriptions",level:2},{value:"Basic Status Check After Purchase",id:"basic-status-check-after-purchase",level:3},{value:"Checking Multiple Subscription Tiers",id:"checking-multiple-subscription-tiers",level:3},{value:"Platform-Specific Properties",id:"platform-specific-properties",level:3},{value:"3. Subscription Plan Changes (Upgrade/Downgrade)",id:"3-subscription-plan-changes-upgradedowngrade",level:2},{value:"iOS: Automatic Subscription Group Management",id:"ios-automatic-subscription-group-management",level:3},{value:"4. Android: Manual Plan Changes with Purchase Token",id:"4-android-manual-plan-changes-with-purchase-token",level:2},{value:"Android Replacement Modes",id:"android-replacement-modes",level:3},{value:"5. Platform-Unified Subscription Change Handler",id:"5-platform-unified-subscription-change-handler",level:2},{value:"Platform Differences Summary",id:"platform-differences-summary",level:2},{value:"Complete Example",id:"complete-example",level:2},{value:"Key Points Summary",id:"key-points-summary",level:2},{value:"Purchase Flow",id:"purchase-flow",level:3},{value:"Platform Differences",id:"platform-differences",level:3},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"subscriptions-flow",children:"Subscriptions Flow"})}),"\n",(0,i.jsx)(c.A,{}),"\n",(0,i.jsxs)(n.p,{children:["This guide demonstrates common subscription scenarios using expo-iap. For the complete implementation, see ",(0,i.jsx)(n.a,{href:"https://github.com/hyochan/expo-iap/blob/main/example/app/subscription-flow.tsx",children:"example/app/subscription-flow.tsx"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"View the full example source:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["GitHub: ",(0,i.jsx)(n.a,{href:"https://github.com/hyochan/expo-iap/blob/main/example/app/subscription-flow.tsx",children:"example/app/subscription-flow.tsx"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"flow-overview",children:"Flow Overview"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",children:"Connect \u2192 Fetch Products \u2192 Request Purchase \u2192 Handle Response \u2192 Check Status \u2192 Manage Subscription\n"})}),"\n",(0,i.jsx)(n.h2,{id:"1-purchasing-a-subscription-with-requestpurchase",children:"1. Purchasing a Subscription with requestPurchase"}),"\n",(0,i.jsx)(n.h3,{id:"basic-subscription-purchase",children:"Basic Subscription Purchase"}),"\n",(0,i.jsx)(n.p,{children:"Start by loading subscription products and requesting a purchase:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {useIAP} from 'expo-iap';\nimport {Platform, Alert} from 'react-native';\n\nfunction SubscriptionPurchase() {\n  const {connected, subscriptions, requestPurchase, fetchProducts} = useIAP();\n\n  useEffect(() => {\n    // Load subscription products\n    if (connected) {\n      fetchProducts({\n        skus: ['com.app.premium_monthly', 'com.app.premium_yearly'],\n        type: 'subs',\n      });\n    }\n  }, [connected]);\n\n  const purchaseSubscription = async (productId: string) => {\n    if (!connected) {\n      Alert.alert('Error', 'Store not connected');\n      return;\n    }\n\n    try {\n      // Find the subscription product\n      const subscription = subscriptions.find((sub) => sub.id === productId);\n      if (!subscription) {\n        throw new Error('Subscription not found');\n      }\n\n      // Platform-specific purchase request\n      await requestPurchase({\n        request: {\n          ios: {\n            sku: productId,\n            andDangerouslyFinishTransactionAutomatically: false,\n          },\n          android: {\n            skus: [productId],\n            // Android requires subscriptionOffers for subscriptions\n            subscriptionOffers:\n              subscription.subscriptionOfferDetailsAndroid?.map((offer) => ({\n                sku: subscription.id,\n                offerToken: offer.offerToken,\n              })) || [],\n          },\n        },\n        type: 'subs',\n      });\n\n      // Success handling is done in onPurchaseSuccess callback\n    } catch (error) {\n      console.error('Purchase failed:', error);\n      Alert.alert('Error', 'Failed to purchase subscription');\n    }\n  };\n\n  return (\n    <View>\n      {subscriptions.map((sub) => (\n        <TouchableOpacity\n          key={sub.id}\n          onPress={() => purchaseSubscription(sub.id)}\n        >\n          <Text>\n            {sub.title} - {sub.localizedPrice}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n  );\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"handling-purchase-success-with-hook-callbacks",children:"Handling Purchase Success with Hook Callbacks"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"onPurchaseSuccess"})," and ",(0,i.jsx)(n.code,{children:"onPurchaseError"})," callbacks from ",(0,i.jsx)(n.code,{children:"useIAP"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {useIAP, ErrorCode} from 'expo-iap';\n\nfunction SubscriptionManager() {\n  const [activeSubscription, setActiveSubscription] = useState(null);\n\n  const {connected, subscriptions, requestPurchase, finishTransaction} = useIAP(\n    {\n      onPurchaseSuccess: async (purchase) => {\n        console.log('Purchase successful:', purchase.productId);\n\n        // Validate with your server\n        const isValid = await validatePurchaseOnServer(purchase);\n\n        if (isValid) {\n          // Update local state\n          setActiveSubscription(purchase.productId);\n\n          // Finish the transaction\n          await finishTransaction({purchase});\n\n          Alert.alert('Success', 'Subscription activated!');\n        }\n      },\n      onPurchaseError: (error) => {\n        if (error.code !== ErrorCode.UserCancelled) {\n          Alert.alert('Error', error.message);\n        }\n      },\n    },\n  );\n\n  // Purchase function remains simple\n  const subscribe = async (productId: string) => {\n    const subscription = subscriptions.find((s) => s.id === productId);\n    if (!subscription) return;\n\n    await requestPurchase({\n      request: {\n        ios: {\n          sku: productId,\n          andDangerouslyFinishTransactionAutomatically: false,\n        },\n        android: {\n          skus: [productId],\n          subscriptionOffers:\n            subscription.subscriptionOfferDetailsAndroid?.map((offer) => ({\n              sku: subscription.id,\n              offerToken: offer.offerToken,\n            })) || [],\n        },\n      },\n      type: 'subs',\n    });\n    // Don't handle success here - use onPurchaseSuccess callback\n  };\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"2-checking-subscription-status-with-getactivesubscriptions",children:"2. Checking Subscription Status with getActiveSubscriptions"}),"\n",(0,i.jsx)(n.h3,{id:"basic-status-check-after-purchase",children:"Basic Status Check After Purchase"}),"\n",(0,i.jsxs)(n.p,{children:["Check subscription status with ",(0,i.jsx)(n.code,{children:"getActiveSubscriptions()"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {useIAP} from 'expo-iap';\nimport {Platform} from 'react-native';\n\nfunction useSubscriptionStatus() {\n  const {getActiveSubscriptions} = useIAP();\n  const [isSubscribed, setIsSubscribed] = useState(false);\n  const [subscriptionDetails, setSubscriptionDetails] = useState(null);\n\n  const checkSubscriptionStatus = async () => {\n    try {\n      // Get active subscriptions - returns array of active subscriptions\n      const activeSubscriptions = await getActiveSubscriptions();\n\n      if (activeSubscriptions.length > 0) {\n        // User has at least one active subscription\n        setIsSubscribed(true);\n\n        // Check specific subscription details\n        const subscription = activeSubscriptions[0];\n\n        // Platform-specific status checks\n        if (Platform.OS === 'ios') {\n          // iOS provides expirationDateIos\n          const isExpired = subscription.expirationDateIos < Date.now();\n          setSubscriptionDetails({\n            productId: subscription.productId,\n            isActive: !isExpired,\n            expiresAt: new Date(subscription.expirationDateIos),\n            environment: subscription.environmentIOS, // 'Production' or 'Sandbox'\n          });\n        } else {\n          // Android provides autoRenewingAndroid\n          setSubscriptionDetails({\n            productId: subscription.productId,\n            isActive: subscription.autoRenewingAndroid,\n            willAutoRenew: subscription.autoRenewingAndroid,\n            purchaseState: subscription.purchaseStateAndroid, // 0 = purchased, 1 = canceled\n          });\n        }\n      } else {\n        setIsSubscribed(false);\n        setSubscriptionDetails(null);\n      }\n    } catch (error) {\n      console.error('Failed to check subscription status:', error);\n    }\n  };\n\n  return {isSubscribed, subscriptionDetails, checkSubscriptionStatus};\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"checking-multiple-subscription-tiers",children:"Checking Multiple Subscription Tiers"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"const SUBSCRIPTION_SKUS = {\n  BASIC: 'com.app.basic_monthly',\n  PREMIUM: 'com.app.premium_monthly',\n  PREMIUM_YEARLY: 'com.app.premium_yearly',\n};\n\nasync function getUserSubscriptionTier() {\n  const {getActiveSubscriptions} = useIAP();\n\n  try {\n    const activeSubscriptions = await getActiveSubscriptions();\n\n    // Check for premium yearly first (highest tier)\n    const yearlyPremium = activeSubscriptions.find(\n      (sub) => sub.productId === SUBSCRIPTION_SKUS.PREMIUM_YEARLY,\n    );\n    if (yearlyPremium) return 'PREMIUM_YEARLY';\n\n    // Then check monthly premium\n    const monthlyPremium = activeSubscriptions.find(\n      (sub) => sub.productId === SUBSCRIPTION_SKUS.PREMIUM,\n    );\n    if (monthlyPremium) return 'PREMIUM';\n\n    // Finally check basic\n    const basic = activeSubscriptions.find(\n      (sub) => sub.productId === SUBSCRIPTION_SKUS.BASIC,\n    );\n    if (basic) return 'BASIC';\n\n    return 'FREE';\n  } catch (error) {\n    console.error('Failed to get subscription tier:', error);\n    return 'FREE';\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"platform-specific-properties",children:"Platform-Specific Properties"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"iOS:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"expirationDateIOS"}),": Unix timestamp when subscription expires"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"environmentIOS"}),": 'Production' or 'Sandbox'"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Android:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"autoRenewingAndroid"}),": Boolean for auto-renewal status"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"purchaseStateAndroid"}),": Purchase state (0 = purchased, 1 = canceled)"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\u26a0\ufe0f ",(0,i.jsx)(n.strong,{children:"Always validate on your server."})," Client-side checks are for UI only."]}),"\n",(0,i.jsx)(n.h2,{id:"3-subscription-plan-changes-upgradedowngrade",children:"3. Subscription Plan Changes (Upgrade/Downgrade)"}),"\n",(0,i.jsx)(n.h3,{id:"ios-automatic-subscription-group-management",children:"iOS: Automatic Subscription Group Management"}),"\n",(0,i.jsx)(n.p,{children:"On iOS, subscriptions in the same subscription group automatically replace each other when purchased. The App Store handles the proration and timing automatically."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"// iOS Subscription Configuration in App Store Connect:\n// Subscription Group: \"Premium Access\"\n// - com.app.premium_monthly (Rank 1)\n// - com.app.premium_yearly (Rank 2 - higher rank = better value)\n\nasync function handleIOSSubscriptionChange(newProductId: string) {\n  const {requestPurchase, getActiveSubscriptions} = useIAP();\n\n  try {\n    // Check current subscription\n    const currentSubs = await getActiveSubscriptions();\n    const currentSub = currentSubs.find(\n      (sub) =>\n        sub.productId === 'com.app.premium_monthly' ||\n        sub.productId === 'com.app.premium_yearly',\n    );\n\n    if (currentSub) {\n      console.log(`Changing from ${currentSub.productId} to ${newProductId}`);\n      // iOS automatically handles the switch when both products are in the same group\n    }\n\n    // Simply purchase the new subscription\n    // iOS will automatically:\n    // 1. Cancel the old subscription at the end of the current period\n    // 2. Start the new subscription\n    // 3. Handle any necessary proration\n    await requestPurchase({\n      request: {\n        ios: {\n          sku: newProductId,\n          andDangerouslyFinishTransactionAutomatically: false,\n        },\n        android: {\n          skus: [newProductId],\n        },\n      },\n      type: 'subs',\n    });\n\n    Alert.alert(\n      'Subscription Updated',\n      'Your subscription will change at the end of the current billing period.',\n    );\n  } catch (error) {\n    console.error('Subscription change failed:', error);\n  }\n}\n\n// Usage example\nfunction IOSSubscriptionManager() {\n  const handleUpgradeToYearly = () => {\n    handleIOSSubscriptionChange('com.app.premium_yearly');\n  };\n\n  const handleDowngradeToMonthly = () => {\n    handleIOSSubscriptionChange('com.app.premium_monthly');\n  };\n\n  return (\n    <View>\n      <Text>iOS subscriptions in the same group auto-replace each other</Text>\n      <Button title=\"Upgrade to Yearly\" onPress={handleUpgradeToYearly} />\n      <Button title=\"Switch to Monthly\" onPress={handleDowngradeToMonthly} />\n    </View>\n  );\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," iOS automatically manages the change based on subscription group. The change can be immediate (upgrade) or scheduled (downgrade)."]}),"\n",(0,i.jsx)(n.h2,{id:"4-android-manual-plan-changes-with-purchase-token",children:"4. Android: Manual Plan Changes with Purchase Token"}),"\n",(0,i.jsx)(n.p,{children:"On Android, you need to explicitly handle subscription upgrades/downgrades using the purchase token from the existing subscription."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"async function handleAndroidSubscriptionChange(\n  newProductId: string,\n  changeType: 'upgrade' | 'downgrade',\n) {\n  const {requestPurchase, getAvailablePurchases, subscriptions} = useIAP();\n\n  try {\n    // Step 1: Get the current subscription's purchase token\n    await getAvailablePurchases();\n    const currentPurchase = availablePurchases.find(\n      (p) =>\n        p.productId === 'com.app.premium_monthly' ||\n        p.productId === 'com.app.premium_yearly',\n    );\n\n    if (!currentPurchase?.purchaseToken) {\n      throw new Error('No active subscription found');\n    }\n\n    // Step 2: Find the new subscription product\n    const newSubscription = subscriptions.find(\n      (sub) => sub.id === newProductId,\n    );\n    if (!newSubscription) {\n      throw new Error('New subscription product not found');\n    }\n\n    // Step 3: Prepare subscription offers\n    const subscriptionOffers = (\n      newSubscription.subscriptionOfferDetailsAndroid ?? []\n    ).map((offer) => ({\n      sku: newSubscription.id,\n      offerToken: offer.offerToken,\n    }));\n\n    // Step 4: Request purchase with the old purchase token for replacement\n    await requestPurchase({\n      request: {\n        ios: {\n          sku: newProductId,\n        },\n        android: {\n          skus: [newProductId],\n          subscriptionOffers,\n          // IMPORTANT: Include purchase token for subscription replacement\n          purchaseTokenAndroid: currentPurchase.purchaseToken,\n          // Optional: Specify replacement mode\n          replacementModeAndroid:\n            changeType === 'upgrade'\n              ? 1 // WITH_TIME_PRORATION - immediate with prorated credit\n              : 6, // DEFERRED - change at next renewal\n        },\n      },\n      type: 'subs',\n    });\n\n    const message =\n      changeType === 'upgrade'\n        ? 'Subscription upgraded immediately!'\n        : 'Subscription will change at the end of current period.';\n\n    Alert.alert('Success', message);\n  } catch (error) {\n    console.error('Android subscription change failed:', error);\n    Alert.alert('Error', 'Failed to change subscription plan');\n  }\n}\n\n// Complete Android Example with UI\nfunction AndroidSubscriptionManager() {\n  const {subscriptions, getAvailablePurchases, availablePurchases} = useIAP();\n  const [currentPlan, setCurrentPlan] = useState<string | null>(null);\n\n  useEffect(() => {\n    checkCurrentPlan();\n  }, []);\n\n  const checkCurrentPlan = async () => {\n    try {\n      await getAvailablePurchases();\n      const activeSub = availablePurchases.find(\n        (p) =>\n          p.productId === 'com.app.premium_monthly' ||\n          p.productId === 'com.app.premium_yearly',\n      );\n      setCurrentPlan(activeSub?.productId || null);\n    } catch (error) {\n      console.error('Failed to check current plan:', error);\n    }\n  };\n\n  const handlePlanChange = (targetPlan: string) => {\n    if (!currentPlan) {\n      // New subscription\n      purchaseNewSubscription(targetPlan);\n    } else if (\n      currentPlan === 'com.app.premium_monthly' &&\n      targetPlan === 'com.app.premium_yearly'\n    ) {\n      // Upgrade to yearly\n      handleAndroidSubscriptionChange(targetPlan, 'upgrade');\n    } else if (\n      currentPlan === 'com.app.premium_yearly' &&\n      targetPlan === 'com.app.premium_monthly'\n    ) {\n      // Downgrade to monthly\n      handleAndroidSubscriptionChange(targetPlan, 'downgrade');\n    }\n  };\n\n  return (\n    <View>\n      <Text>Current Plan: {currentPlan || 'None'}</Text>\n\n      {currentPlan === 'com.app.premium_monthly' ? (\n        <Button\n          title=\"\u2b06\ufe0f Upgrade to Yearly (Save 20%)\"\n          onPress={() => handlePlanChange('com.app.premium_yearly')}\n        />\n      ) : null}\n\n      {currentPlan === 'com.app.premium_yearly' ? (\n        <Button\n          title=\"\u2b07\ufe0f Switch to Monthly\"\n          onPress={() => handlePlanChange('com.app.premium_monthly')}\n        />\n      ) : null}\n    </View>\n  );\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"android-replacement-modes",children:"Android Replacement Modes"}),"\n",(0,i.jsxs)(n.p,{children:["These constants match ",(0,i.jsx)(n.a,{href:"https://developer.android.com/reference/com/android/billingclient/api/BillingFlowParams.SubscriptionUpdateParams.ReplacementMode",children:"Android's BillingFlowParams.SubscriptionUpdateParams.ReplacementMode"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"1"})," (WITH_TIME_PRORATION): Immediate change with prorated credit"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"2"})," (CHARGE_PRORATED_PRICE): Immediate change with prorated charge (upgrade only)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"3"})," (WITHOUT_PRORATION): Immediate change, no proration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"5"})," (CHARGE_FULL_PRICE): Immediate change, charge full price"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"6"})," (DEFERRED): Change takes effect at next renewal"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Important Notes:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["If you don't specify ",(0,i.jsx)(n.code,{children:"replacementModeAndroid"}),", the system uses the default replacement mode configured in your Google Play Console subscription settings."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"DEFERRED mode behavior"}),": When using ",(0,i.jsx)(n.code,{children:"DEFERRED"})," mode (6), the subscription change request succeeds immediately, but the actual subscription change won't take effect until the next renewal period. The purchase callback will complete successfully with an empty purchase list - this is expected behavior, not an error."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"5-platform-unified-subscription-change-handler",children:"5. Platform-Unified Subscription Change Handler"}),"\n",(0,i.jsx)(n.p,{children:"Here's a complete example that handles both platforms appropriately:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"function SubscriptionPlanManager() {\n  const {\n    requestPurchase,\n    getActiveSubscriptions,\n    getAvailablePurchases,\n    subscriptions,\n    availablePurchases,\n  } = useIAP();\n\n  const handleSubscriptionChange = async (newProductId: string) => {\n    try {\n      if (Platform.OS === 'ios') {\n        // iOS: Simple purchase - automatic replacement in same group\n        await requestPurchase({\n          request: {\n            ios: {\n              sku: newProductId,\n              andDangerouslyFinishTransactionAutomatically: false,\n            },\n            android: {\n              skus: [newProductId],\n            },\n          },\n          type: 'subs',\n        });\n\n        Alert.alert(\n          'Subscription Updated',\n          'Your plan will change at the end of the current period.',\n        );\n      } else {\n        // Android: Need purchase token for replacement\n        await getAvailablePurchases();\n\n        // Find current subscription\n        const currentPurchase = availablePurchases.find((p) =>\n          p.productId.includes('premium'),\n        );\n\n        // Find new subscription details\n        const newSub = subscriptions.find((s) => s.id === newProductId);\n\n        if (currentPurchase?.purchaseToken && newSub) {\n          // Prepare offers\n          const offers = (newSub.subscriptionOfferDetailsAndroid ?? []).map(\n            (offer) => ({\n              sku: newSub.id,\n              offerToken: offer.offerToken,\n            }),\n          );\n\n          // Purchase with replacement\n          await requestPurchase({\n            request: {\n              ios: {\n                sku: newProductId,\n              },\n              android: {\n                skus: [newProductId],\n                subscriptionOffers: offers,\n                purchaseTokenAndroid: currentPurchase.purchaseToken,\n              },\n            },\n            type: 'subs',\n          });\n\n          Alert.alert('Success', 'Subscription plan changed!');\n        } else {\n          // New subscription (no existing one)\n          const offers = (newSub?.subscriptionOfferDetailsAndroid ?? []).map(\n            (offer) => ({\n              sku: newSub.id,\n              offerToken: offer.offerToken,\n            }),\n          );\n\n          await requestPurchase({\n            request: {\n              ios: {\n                sku: newProductId,\n              },\n              android: {\n                skus: [newProductId],\n                subscriptionOffers: offers,\n              },\n            },\n            type: 'subs',\n          });\n        }\n      }\n\n      // Refresh subscription status\n      await getActiveSubscriptions();\n    } catch (error) {\n      console.error('Subscription change error:', error);\n      Alert.alert('Error', 'Failed to change subscription');\n    }\n  };\n\n  return (\n    <View>\n      <Text style={styles.title}>Choose Your Plan</Text>\n\n      <TouchableOpacity\n        style={styles.planCard}\n        onPress={() => handleSubscriptionChange('com.app.premium_monthly')}\n      >\n        <Text>Monthly - $9.99/month</Text>\n      </TouchableOpacity>\n\n      <TouchableOpacity\n        style={[styles.planCard, styles.recommended]}\n        onPress={() => handleSubscriptionChange('com.app.premium_yearly')}\n      >\n        <Text>Yearly - $99.99/year (Save $20!)</Text>\n      </TouchableOpacity>\n\n      <Text style={styles.note}>\n        {Platform.OS === 'ios'\n          ? '\u2713 Changes take effect at the end of current period'\n          : '\u2713 Upgrades apply immediately with proration'}\n      </Text>\n    </View>\n  );\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"platform-differences-summary",children:"Platform Differences Summary"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Feature"}),(0,i.jsx)(n.th,{children:"iOS"}),(0,i.jsx)(n.th,{children:"Android"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Subscription Change"})}),(0,i.jsx)(n.td,{children:"Automatic (same group)"}),(0,i.jsxs)(n.td,{children:["Manual with ",(0,i.jsx)(n.code,{children:"purchaseToken"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Parameters"})}),(0,i.jsxs)(n.td,{children:["Just new ",(0,i.jsx)(n.code,{children:"sku"})]}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"purchaseTokenAndroid"})," + ",(0,i.jsx)(n.code,{children:"replacementModeAndroid"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Timing"})}),(0,i.jsx)(n.td,{children:"OS-determined"}),(0,i.jsxs)(n.td,{children:["Specified via ",(0,i.jsx)(n.code,{children:"replacementModeAndroid"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Plan Changes"})}),(0,i.jsx)(n.td,{children:"Use subscription groups with ranks"}),(0,i.jsx)(n.td,{children:"Use base plans and offers"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Status Check"})}),(0,i.jsxs)(n.td,{children:["Check ",(0,i.jsx)(n.code,{children:"expirationDateIos"})]}),(0,i.jsxs)(n.td,{children:["Check ",(0,i.jsx)(n.code,{children:"autoRenewingAndroid"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Cancellation Detection"})}),(0,i.jsx)(n.td,{children:"User manages in Settings"}),(0,i.jsxs)(n.td,{children:["Check ",(0,i.jsx)(n.code,{children:"autoRenewingAndroid === false"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Proration"})}),(0,i.jsx)(n.td,{children:"Handled by App Store"}),(0,i.jsxs)(n.td,{children:["Configurable via ",(0,i.jsx)(n.code,{children:"replacementModeAndroid"})]})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,i.jsx)(n.p,{children:"For a full working implementation including:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Purchase handling"}),"\n",(0,i.jsx)(n.li,{children:"Status checking"}),"\n",(0,i.jsx)(n.li,{children:"Error handling"}),"\n",(0,i.jsx)(n.li,{children:"UI components"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["See ",(0,i.jsx)(n.a,{href:"https://github.com/hyochan/expo-iap/blob/main/example/app/subscription-flow.tsx",children:"example/app/subscription-flow.tsx"})]}),"\n",(0,i.jsx)(n.h2,{id:"key-points-summary",children:"Key Points Summary"}),"\n",(0,i.jsx)(n.h3,{id:"purchase-flow",children:"Purchase Flow"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Always use hook callbacks (",(0,i.jsx)(n.code,{children:"onPurchaseSuccess"}),", ",(0,i.jsx)(n.code,{children:"onPurchaseError"}),") for handling results"]}),"\n",(0,i.jsxs)(n.li,{children:["Don't chain ",(0,i.jsx)(n.code,{children:".then()"})," on ",(0,i.jsx)(n.code,{children:"requestPurchase"})," promise - it can fire at the wrong time"]}),"\n",(0,i.jsxs)(n.li,{children:["Android requires ",(0,i.jsx)(n.code,{children:"subscriptionOffers"})," array with offer tokens for subscription purchases"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"platform-differences",children:"Platform Differences"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"iOS"}),": Plan changes are automatic within subscription group"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Android"}),": Manual plan changes with ",(0,i.jsx)(n.code,{children:"purchaseToken"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"iOS"}),": Proration handled by App Store"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Android"}),": Configurable via ",(0,i.jsx)(n.code,{children:"replacementModeAndroid"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Always validate on server"}),": Client-side checks are for UI only"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Handle grace periods"}),": Check for billing issues before removing access"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use hook callbacks"}),": Don't rely on promise resolution for state updates"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Clear messaging"}),": Explain when changes take effect"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Test thoroughly"}),": Use sandbox/test accounts for both platforms"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Store state properly"}),": Cache subscription status to reduce API calls"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>o});var r=s(6540);const i={},t=r.createContext(i);function c(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);