"use strict";(globalThis.webpackChunkexpo_iap_docs=globalThis.webpackChunkexpo_iap_docs||[]).push([[9610],{571:(e,n,r)=>{r.d(n,{A:()=>i});var s=r(6540),o=r(4848);function t({className:e="adfit",style:n,unit:r,height:t,width:i}){return(0,s.useEffect)(()=>{const n=setTimeout(()=>{const n=document.querySelector(`.${e}`);if(!n)return void console.warn(`AdFit: Element with class "${e}" not found`);const s=n.querySelectorAll(".kakao_ad_area"),o=n.querySelectorAll('script[src*="kas/static/ba.min.js"]');s.forEach(e=>e.remove()),o.forEach(e=>e.remove());const a=document.createElement("ins"),c=document.createElement("script");a.className="kakao_ad_area",a.style.cssText="display:none; width:100%;",c.async=!0,c.type="text/javascript",c.src="//t1.daumcdn.net/kas/static/ba.min.js",a.setAttribute("data-ad-width",i.toString()),a.setAttribute("data-ad-height",t.toString()),a.setAttribute("data-ad-unit",r),n.appendChild(a),n.appendChild(c)},100);return()=>clearTimeout(n)},[e,r,t,i]),(0,o.jsx)("div",{style:n,children:(0,o.jsx)("div",{className:e})})}function i(){return(0,o.jsx)(t,{unit:"DAN-YTmjDwlbcP42HBg6",height:100,width:320,className:"adfit-top",style:{flex:1,marginTop:24,marginBottom:24}})}},8394:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"api/methods/listeners","title":"Listeners","description":"expo-iap provides event listeners to handle purchase updates and errors. These listeners are essential for handling the asynchronous nature of in-app purchases.","source":"@site/docs/api/methods/listeners.md","sourceDirName":"api/methods","slug":"/api/methods/listeners","permalink":"/expo-iap/docs/api/methods/listeners","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/expo-iap/tree/main/docs/docs/api/methods/listeners.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Listeners","sidebar_label":"Listeners","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Core Methods","permalink":"/expo-iap/docs/api/methods/core-methods"},"next":{"title":"useIAP Hook","permalink":"/expo-iap/docs/api/use-iap"}}');var o=r(4848),t=r(8453),i=r(571);const a={title:"Listeners",sidebar_label:"Listeners",sidebar_position:2},c="Purchase Listeners",l={},d=[{value:"purchaseUpdatedListener()",id:"purchaseupdatedlistener",level:2},{value:"purchaseErrorListener()",id:"purchaseerrorlistener",level:2},{value:"promotedProductListenerIOS() (iOS only)",id:"promotedproductlistenerios-ios-only",level:2},{value:"Using Listeners with React Hooks",id:"using-listeners-with-react-hooks",level:2},{value:"Functional Components",id:"functional-components",level:3},{value:"Class Components",id:"class-components",level:3},{value:"Custom Hook for Purchase Handling",id:"custom-hook-for-purchase-handling",level:2},{value:"Important Notes",id:"important-notes",level:2},{value:"Listener Lifecycle",id:"listener-lifecycle",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Purchase States",id:"purchase-states",level:3},{value:"Alternative: useIAP Hook",id:"alternative-useiap-hook",level:2},{value:"userChoiceBillingListenerAndroid()",id:"userchoicebillinglistenerandroid",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"purchase-listeners",children:"Purchase Listeners"})}),"\n",(0,o.jsx)(i.A,{}),"\n",(0,o.jsx)(n.p,{children:"expo-iap provides event listeners to handle purchase updates and errors. These listeners are essential for handling the asynchronous nature of in-app purchases."}),"\n",(0,o.jsx)(n.h2,{id:"purchaseupdatedlistener",children:"purchaseUpdatedListener()"}),"\n",(0,o.jsxs)(n.p,{children:["Listens for purchase updates from ",(0,o.jsx)(n.strong,{children:"the"})," store."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import {purchaseUpdatedListener} from 'expo-iap';\n\nconst setupPurchaseListener = () => {\n  const subscription = purchaseUpdatedListener((purchase) => {\n    console.log('Purchase received:', purchase);\n    handlePurchaseUpdate(purchase);\n  });\n\n  // Clean up listener when component unmounts\n  return () => {\n    if (subscription) {\n      subscription.remove();\n    }\n  };\n};\n\nconst handlePurchaseUpdate = async (purchase) => {\n  try {\n    // Validate receipt on your server\n    const isValid = await validateReceiptOnServer(purchase);\n\n    if (isValid) {\n      // Grant purchase to user\n      await grantPurchaseToUser(purchase);\n\n      // Finish the transaction\n      await finishTransaction({purchase});\n\n      console.log('Purchase completed successfully');\n    } else {\n      console.error('Receipt validation failed');\n    }\n  } catch (error) {\n    console.error('Error handling purchase:', error);\n  }\n};\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"callback"})," (function): Function to call when a purchase update is received","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"purchase"})," (Purchase): The purchase object"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Returns:"})," Subscription object with ",(0,o.jsx)(n.code,{children:"remove()"})," method"]}),"\n",(0,o.jsx)(n.h2,{id:"purchaseerrorlistener",children:"purchaseErrorListener()"}),"\n",(0,o.jsx)(n.p,{children:"Listens for purchase errors from the store."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import {purchaseErrorListener} from 'expo-iap';\n\nconst setupErrorListener = () => {\n  const subscription = purchaseErrorListener((error) => {\n    console.error('Purchase error:', error);\n    handlePurchaseError(error);\n  });\n\n  // Clean up listener when component unmounts\n  return () => {\n    if (subscription) {\n      subscription.remove();\n    }\n  };\n};\n\nconst handlePurchaseError = (error) => {\n  switch (error.code) {\n    case ErrorCode.UserCancelled:\n      // User cancelled the purchase\n      console.log('Purchase cancelled by user');\n      break;\n\n    case ErrorCode.NetworkError:\n      // Network error occurred\n      showErrorMessage(\n        'Network error. Please check your connection and try again.',\n      );\n      break;\n\n    case ErrorCode.ItemUnavailable:\n      // Product is not available\n      showErrorMessage('This product is currently unavailable.');\n      break;\n\n    case ErrorCode.AlreadyOwned:\n      // User already owns this product\n      showErrorMessage('You already own this product.');\n      break;\n\n    default:\n      // Other errors\n      showErrorMessage(`Purchase failed: ${error.message}`);\n      break;\n  }\n};\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"callback"})," (function): Function to call when a purchase error occurs","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"error"})," (PurchaseError): The error object"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Returns:"})," Subscription object with ",(0,o.jsx)(n.code,{children:"remove()"})," method"]}),"\n",(0,o.jsx)(n.h2,{id:"promotedproductlistenerios-ios-only",children:"promotedProductListenerIOS() (iOS only)"}),"\n",(0,o.jsx)(n.p,{children:"Listens for promoted product purchases initiated from the App Store. This fires when a user taps on a promoted product in the App Store."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import {\n  promotedProductListenerIOS,\n  getPromotedProductIOS,\n  requestPurchaseOnPromotedProductIOS,\n} from 'expo-iap';\n\nconst setupPromotedProductListener = () => {\n  const subscription = promotedProductListenerIOS((product) => {\n    console.log('Promoted product purchase initiated:', product);\n    handlePromotedProduct(product);\n  });\n\n  return () => {\n    if (subscription) {\n      subscription.remove();\n    }\n  };\n};\n\nconst handlePromotedProduct = async (product) => {\n  try {\n    // Show your custom purchase UI with the product details\n    const confirmed = await showProductConfirmation(product);\n\n    if (confirmed) {\n      // Complete the promoted purchase\n      await requestPurchaseOnPromotedProductIOS();\n    }\n  } catch (error) {\n    console.error('Error handling promoted product:', error);\n  }\n};\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"callback"})," (function): Function to call when a promoted product is selected","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"product"})," (Product): The promoted product object"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Returns:"})," Subscription object with ",(0,o.jsx)(n.code,{children:"remove()"})," method"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Related Methods:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"getPromotedProductIOS()"}),": Get the promoted product details"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"requestPurchaseOnPromotedProductIOS()"}),": Complete the promoted product purchase"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Note:"})," This listener only works on iOS devices and is used for handling App Store promoted products."]}),"\n",(0,o.jsx)(n.h2,{id:"using-listeners-with-react-hooks",children:"Using Listeners with React Hooks"}),"\n",(0,o.jsx)(n.h3,{id:"functional-components",children:"Functional Components"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import React, {useEffect} from 'react';\nimport {purchaseUpdatedListener, purchaseErrorListener} from 'expo-iap';\n\nexport default function PurchaseManager() {\n  useEffect(() => {\n    // Set up purchase listeners\n    const purchaseUpdateSubscription = purchaseUpdatedListener((purchase) => {\n      handlePurchaseUpdate(purchase);\n    });\n\n    const purchaseErrorSubscription = purchaseErrorListener((error) => {\n      handlePurchaseError(error);\n    });\n\n    // Cleanup function\n    return () => {\n      purchaseUpdateSubscription?.remove();\n      purchaseErrorSubscription?.remove();\n    };\n  }, []);\n\n  const handlePurchaseUpdate = async (purchase) => {\n    // Handle purchase logic\n  };\n\n  const handlePurchaseError = (error) => {\n    // Handle error logic\n  };\n\n  return <div>{/* Your component JSX */}</div>;\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"class-components",children:"Class Components"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import React, {Component} from 'react';\nimport {purchaseUpdatedListener, purchaseErrorListener} from 'expo-iap';\n\nclass PurchaseManager extends Component {\n  purchaseUpdateSubscription = null;\n  purchaseErrorSubscription = null;\n\n  componentDidMount() {\n    // Set up listeners\n    this.purchaseUpdateSubscription = purchaseUpdatedListener((purchase) => {\n      this.handlePurchaseUpdate(purchase);\n    });\n\n    this.purchaseErrorSubscription = purchaseErrorListener((error) => {\n      this.handlePurchaseError(error);\n    });\n  }\n\n  componentWillUnmount() {\n    // Clean up listeners\n    if (this.purchaseUpdateSubscription) {\n      this.purchaseUpdateSubscription.remove();\n    }\n\n    if (this.purchaseErrorSubscription) {\n      this.purchaseErrorSubscription.remove();\n    }\n  }\n\n  handlePurchaseUpdate = async (purchase) => {\n    // Handle purchase logic\n  };\n\n  handlePurchaseError = (error) => {\n    // Handle error logic\n  };\n\n  render() {\n    return <div>{/* Your component JSX */}</div>;\n  }\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"custom-hook-for-purchase-handling",children:"Custom Hook for Purchase Handling"}),"\n",(0,o.jsx)(n.p,{children:"You can create a custom hook to encapsulate purchase listener logic:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import {useEffect, useCallback} from 'react';\nimport {\n  purchaseUpdatedListener,\n  purchaseErrorListener,\n  finishTransaction,\n} from 'expo-iap';\n\nexport const usePurchaseHandler = () => {\n  const handlePurchaseUpdate = useCallback(async (purchase) => {\n    try {\n      // Validate receipt\n      const isValid = await validateReceiptOnServer(purchase);\n\n      if (isValid) {\n        // Grant purchase\n        await grantPurchaseToUser(purchase);\n\n        // Finish transaction\n        await finishTransaction({purchase});\n\n        // Show success message\n        showSuccessMessage('Purchase completed successfully!');\n      } else {\n        console.error('Receipt validation failed');\n        showErrorMessage('Purchase validation failed. Please contact support.');\n      }\n    } catch (error) {\n      console.error('Error handling purchase:', error);\n      showErrorMessage('An error occurred while processing your purchase.');\n    }\n  }, []);\n\n  const handlePurchaseError = useCallback((error) => {\n    console.error('Purchase error:', error);\n\n    switch (error.code) {\n      case ErrorCode.UserCancelled:\n        // Don't show error for user cancellation\n        break;\n      default:\n        showErrorMessage(`Purchase failed: ${error.message}`);\n        break;\n    }\n  }, []);\n\n  useEffect(() => {\n    // Set up listeners\n    const purchaseUpdateSubscription =\n      purchaseUpdatedListener(handlePurchaseUpdate);\n    const purchaseErrorSubscription =\n      purchaseErrorListener(handlePurchaseError);\n\n    // Cleanup\n    return () => {\n      purchaseUpdateSubscription?.remove();\n      purchaseErrorSubscription?.remove();\n    };\n  }, [handlePurchaseUpdate, handlePurchaseError]);\n};\n\n// Usage in component\nexport default function MyStoreComponent() {\n  usePurchaseHandler(); // Sets up listeners automatically\n\n  return <div>{/* Your store UI */}</div>;\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"important-notes",children:"Important Notes"}),"\n",(0,o.jsx)(n.h3,{id:"listener-lifecycle",children:"Listener Lifecycle"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Set up early"}),": Set up listeners as early as possible in your app lifecycle"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Clean up properly"}),": Always remove listeners to prevent memory leaks"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Handle app states"}),": Purchases can complete when your app is in the background"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,o.jsx)(n.p,{children:"Always handle both purchase updates and errors:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"useEffect(() => {\n  const purchaseUpdateSubscription = purchaseUpdatedListener((purchase) => {\n    // Handle successful/pending purchases\n  });\n\n  const purchaseErrorSubscription = purchaseErrorListener((error) => {\n    // Handle purchase errors\n  });\n\n  return () => {\n    purchaseUpdateSubscription?.remove();\n    purchaseErrorSubscription?.remove();\n  };\n}, []);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"purchase-states",children:"Purchase States"}),"\n",(0,o.jsx)(n.p,{children:"Purchases can be in different states:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Purchased"}),": Successfully completed"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Pending"}),": Awaiting approval (e.g., parental approval)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Failed"}),": Purchase failed"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Handle each state appropriately in your purchase listener."}),"\n",(0,o.jsx)(n.h2,{id:"alternative-useiap-hook",children:"Alternative: useIAP Hook"}),"\n",(0,o.jsxs)(n.p,{children:["For simpler usage, consider using the ",(0,o.jsx)(n.code,{children:"useIAP"})," hook which automatically manages listeners:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import {useIAP} from 'expo-iap';\n\nexport default function StoreComponent() {\n  const {finishTransaction} = useIAP({\n    onPurchaseSuccess: async (purchase) => {\n      await handlePurchaseUpdate(purchase);\n    },\n    onPurchaseError: (error) => {\n      handlePurchaseError(error);\n    },\n  });\n\n  // Rest of component\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"useIAP"})," hook provides a more React-friendly way to handle purchases without manually managing listeners."]}),"\n",(0,o.jsx)(n.h2,{id:"userchoicebillinglistenerandroid",children:"userChoiceBillingListenerAndroid()"}),"\n",(0,o.jsxs)(n.p,{children:["Android-only listener for User Choice Billing events. This fires when a user selects alternative billing instead of Google Play billing in the User Choice Billing dialog (only in ",(0,o.jsx)(n.code,{children:"user-choice"})," mode)."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import {initConnection, userChoiceBillingListenerAndroid} from 'expo-iap';\nimport {Platform} from 'react-native';\n\nconst setupUserChoiceBillingListener = () => {\n  if (Platform.OS !== 'android') return;\n\n  // Initialize with user-choice mode\n  await initConnection({\n    alternativeBillingModeAndroid: 'user-choice',\n  });\n\n  const subscription = userChoiceBillingListenerAndroid((details) => {\n    console.log('User selected alternative billing');\n    console.log('Token:', details.externalTransactionToken);\n    console.log('Products:', details.products);\n\n    handleUserChoiceBilling(details);\n  });\n\n  // Clean up listener when component unmounts\n  return () => {\n    if (subscription) {\n      subscription.remove();\n    }\n  };\n};\n\nconst handleUserChoiceBilling = async (details) => {\n  try {\n    // Step 1: Process payment in your payment system\n    const paymentResult = await processPaymentInYourSystem(details.products);\n\n    if (!paymentResult.success) {\n      console.error('Payment failed');\n      return;\n    }\n\n    // Step 2: Report token to Google Play backend within 24 hours\n    await reportTokenToGooglePlay({\n      token: details.externalTransactionToken,\n      products: details.products,\n      paymentResult,\n    });\n\n    console.log('Alternative billing completed successfully');\n  } catch (error) {\n    console.error('Error handling user choice billing:', error);\n  }\n};\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"callback"})," (function): Function to call when user selects alternative billing","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"details"})," (UserChoiceBillingDetails): The user choice billing details","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"externalTransactionToken"})," (string): Token that must be reported to Google within 24 hours"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"products"})," (string[]): List of product IDs selected by the user"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Returns:"})," Subscription object with ",(0,o.jsx)(n.code,{children:"remove()"})," method"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Platform:"})," Android only (requires ",(0,o.jsx)(n.code,{children:"user-choice"})," mode)"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Important:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Only fires when using ",(0,o.jsx)(n.code,{children:"alternativeBillingModeAndroid: 'user-choice'"})]}),"\n",(0,o.jsx)(n.li,{children:"Token must be reported to Google Play backend within 24 hours"}),"\n",(0,o.jsxs)(n.li,{children:["If user selects Google Play billing instead, ",(0,o.jsx)(n.code,{children:"purchaseUpdatedListener"})," will fire as normal"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example with React:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import {useEffect} from 'react';\nimport {initConnection, userChoiceBillingListenerAndroid} from 'expo-iap';\nimport {Platform} from 'react-native';\n\nexport default function AlternativeBillingComponent() {\n  useEffect(() => {\n    if (Platform.OS !== 'android') return;\n\n    const initialize = async () => {\n      // Initialize with user-choice mode\n      await initConnection({\n        alternativeBillingModeAndroid: 'user-choice',\n      });\n\n      // Set up listener\n      const subscription = userChoiceBillingListenerAndroid(async (details) => {\n        console.log('User chose alternative billing');\n\n        // Process payment and report to Google\n        await handleAlternativeBilling(details);\n      });\n\n      return () => {\n        subscription.remove();\n      };\n    };\n\n    const cleanup = initialize();\n\n    return () => {\n      cleanup.then((fn) => fn?.());\n    };\n  }, []);\n\n  // Rest of component\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"See also:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/docs/api/methods/core-methods#checkalternativebillingavailabilityandroid",children:"checkAlternativeBillingAvailabilityAndroid()"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/docs/api/methods/core-methods#showalternativebillingdialogandroid",children:"showAlternativeBillingDialogAndroid()"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/docs/api/methods/core-methods#createalternativebillingtokenandroid",children:"createAlternativeBillingTokenAndroid()"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://developer.android.com/google/play/billing/alternative",children:"Google Play Alternative Billing documentation"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var s=r(6540);const o={},t=s.createContext(o);function i(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);