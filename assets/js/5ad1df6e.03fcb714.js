"use strict";(globalThis.webpackChunkexpo_iap_docs=globalThis.webpackChunkexpo_iap_docs||[]).push([[665],{8314:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>r});const i=JSON.parse('{"id":"guides/expo-plugin","title":"Expo Plugin","description":"expo-iap comes with a config plugin to automatically configure your project for both iOS and Android. This guide explains how to use it and what it does.","source":"@site/docs/guides/expo-plugin.md","sourceDirName":"guides","slug":"/guides/expo-plugin","permalink":"/expo-iap/docs/guides/expo-plugin","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/expo-iap/tree/main/docs/docs/guides/expo-plugin.md","tags":[],"version":"current","frontMatter":{"title":"Expo Plugin"},"sidebar":"tutorialSidebar","previous":{"title":"Error Handling","permalink":"/expo-iap/docs/guides/error-handling"},"next":{"title":"Troubleshooting","permalink":"/expo-iap/docs/guides/troubleshooting"}}');var s=o(4848),t=o(8453);const a={title:"Expo Plugin"},l=void 0,d={},r=[{value:"Usage",id:"usage",level:2},{value:"Local Development",id:"local-development",level:2},{value:"What it does",id:"what-it-does",level:2},{value:"Android",id:"android",level:3},{value:"iOS",id:"ios",level:3},{value:"Plugin Source Code",id:"plugin-source-code",level:2}];function c(n){const e={blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...n.components},{Details:o}=e;return o||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"expo-iap"})," comes with a config plugin to automatically configure your project for both iOS and Android. This guide explains how to use it and what it does."]}),"\n",(0,s.jsx)(e.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(e.p,{children:["To use the plugin, add it to the ",(0,s.jsx)(e.code,{children:"plugins"})," array in your ",(0,s.jsx)(e.code,{children:"app.json"})," or ",(0,s.jsx)(e.code,{children:"app.config.js"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "expo": {\n    "plugins": ["expo-iap"]\n  }\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"This is the most basic configuration. The plugin also accepts options for local development."}),"\n",(0,s.jsx)(e.h2,{id:"local-development",children:"Local Development"}),"\n",(0,s.jsxs)(e.p,{children:["If you are developing the native OpenIAP modules locally, you can use the ",(0,s.jsx)(e.code,{children:"enableLocalDev"})," and ",(0,s.jsx)(e.code,{children:"localPath"})," options to link them to your project."]}),"\n",(0,s.jsxs)(e.p,{children:["Set ",(0,s.jsx)(e.code,{children:"enableLocalDev"})," to ",(0,s.jsx)(e.code,{children:"true"})," to enable this feature. ",(0,s.jsx)(e.code,{children:"localPath"})," should point to the root of your local ",(0,s.jsx)(e.code,{children:"openiap-apple"})," and ",(0,s.jsx)(e.code,{children:"openiap-google"})," repositories."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "expo": {\n    "plugins": [\n      [\n        "expo-iap",\n        {\n          "enableLocalDev": true,\n          "localPath": {\n            "ios": "../path/to/your/openiap/packages/apple",\n            "android": "../path/to/your/openiap/packages/google"\n          }\n        }\n      ]\n    ]\n  }\n}\n'})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Note:"})," Setting ",(0,s.jsx)(e.code,{children:"enableLocalDev"})," to ",(0,s.jsx)(e.code,{children:"true"})," allows you to test with native ",(0,s.jsx)(e.code,{children:"open-iap"})," modules from a local path."]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"what-it-does",children:"What it does"}),"\n",(0,s.jsx)(e.h3,{id:"android",children:"Android"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Adds the ",(0,s.jsx)(e.code,{children:"com.android.vending.BILLING"})," permission to ",(0,s.jsx)(e.code,{children:"AndroidManifest.xml"}),"."]}),"\n",(0,s.jsxs)(e.li,{children:["Adds the ",(0,s.jsx)(e.code,{children:"io.github.hyochan.openiap:openiap-google"})," dependency to your app's ",(0,s.jsx)(e.code,{children:"build.gradle"}),"."]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"ios",children:"iOS"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Ensures the CocoaPods CDN source is present in your ",(0,s.jsx)(e.code,{children:"Podfile"}),"."]}),"\n",(0,s.jsx)(e.li,{children:"Removes any stale local OpenIAP pod entries to avoid conflicts."}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"plugin-source-code",children:"Plugin Source Code"}),"\n",(0,s.jsxs)(o,{children:[(0,s.jsx)("summary",{children:"app.plugin.js"}),(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"import {\n  ConfigPlugin,\n  createRunOncePlugin,\n  WarningAggregator,\n  withAndroidManifest,\n  withAppBuildGradle,\n  withDangerousMod,\n} from 'expo/config-plugins';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport withLocalOpenIAP from './withLocalOpenIAP';\n\nconst pkg = require('../../package.json');\nconst openiapVersions = JSON.parse(\n  fs.readFileSync(\n    path.resolve(__dirname, '../../openiap-versions.json'),\n    'utf8',\n  ),\n);\nconst OPENIAP_ANDROID_VERSION = openiapVersions.google;\n\n// Log a message only once per Node process\nconst logOnce = (() => {\n  const printed = new Set<string>();\n  return (msg: string) => {\n    if (!printed.has(msg)) {\n      console.log(msg);\n      printed.add(msg);\n    }\n  };\n})();\n\nconst addLineToGradle = (\n  content: string,\n  anchor: RegExp | string,\n  lineToAdd: string,\n  offset: number = 1,\n): string => {\n  const lines = content.split('\\n');\n  const index = lines.findIndex((line) => line.match(anchor));\n  if (index === -1) {\n    WarningAggregator.addWarningAndroid(\n      'expo-iap',\n      `dependencies { ... } block not found; skipping injection: ${lineToAdd.trim()}`,\n    );\n    return content;\n  } else {\n    lines.splice(index + offset, 0, lineToAdd);\n  }\n  return lines.join('\\n');\n};\n\nconst modifyAppBuildGradle = (\n  gradle: string,\n  language: 'groovy' | 'kotlin',\n): string => {\n  let modified = gradle;\n\n  // Ensure OpenIAP dependency exists at desired version in app-level build.gradle(.kts)\n  const impl = (ga: string, v: string) =>\n    language === 'kotlin'\n      ? `    implementation(\"${ga}:${v}\")`\n      : `    implementation \"${ga}:${v}\"`;\n  const openiapDep = impl(\n    'io.github.hyochan.openiap:openiap-google',\n    OPENIAP_ANDROID_VERSION,\n  );\n\n  // Remove any existing openiap-google lines (any version, groovy/kotlin, implementation/api)\n  const openiapAnyLine =\n    /^\\\\s*(?:implementation|api)\\\\s*\\(?\\\\s*[\"']io\\.github\\.hyochan\\.openiap:openiap-google:[^\"']+\\\\s*[\"']\\\\)?\\\\s*$/gm;\n  const hadExisting = openiapAnyLine.test(modified);\n  if (hadExisting) {\n    modified = modified.replace(openiapAnyLine, '').replace(/\\n{3,}/g, '\\n\\n');\n  }\n\n  // Ensure the desired dependency line is present\n  if (\n    !new RegExp(\n      String.raw`io\\.github\\.hyochan\\.openiap:openiap-google:${OPENIAP_ANDROID_VERSION}`,\n    ).test(modified)\n  ) {\n    // Insert just after the opening `dependencies {` line\n    modified = addLineToGradle(modified, /dependencies\\s*{/, openiapDep, 1);\n    logOnce(\n      hadExisting\n        ? `\ud83d\udee0\ufe0f expo-iap: Replaced OpenIAP dependency with ${OPENIAP_ANDROID_VERSION}`\n        : `\ud83d\udee0\ufe0f expo-iap: Added OpenIAP dependency (${OPENIAP_ANDROID_VERSION}) to build.gradle`,\n    );\n  }\n\n  return modified;\n};\n\nconst withIapAndroid: ConfigPlugin<{addDeps?: boolean} | void> = (\n  config,\n  props,\n) => {\n  const addDeps = props?.addDeps ?? true;\n\n  if (addDeps) {\n    config = withAppBuildGradle(config, (config) => {\n      // language provided by config-plugins: 'groovy' | 'kotlin'\n      const language = (config.modResults as any).language || 'groovy';\n      config.modResults.contents = modifyAppBuildGradle(\n        config.modResults.contents,\n        language,\n      );\n      return config;\n    });\n  }\n\n  config = withAndroidManifest(config, (config) => {\n    const manifest = config.modResults;\n    if (!manifest.manifest['uses-permission']) {\n      manifest.manifest['uses-permission'] = [];\n    }\n\n    const permissions = manifest.manifest['uses-permission'];\n    const billingPerm = {$: {'android:name': 'com.android.vending.BILLING'}};\n\n    const alreadyExists = permissions.some(\n      (p) => p.$['android:name'] === 'com.android.vending.BILLING',\n    );\n    if (!alreadyExists) {\n      permissions.push(billingPerm);\n      logOnce('\u2705 Added com.android.vending.BILLING to AndroidManifest.xml');\n    } else {\n      logOnce(\n        '\u2139\ufe0f com.android.vending.BILLING already exists in AndroidManifest.xml',\n      );\n    }\n\n    return config;\n  });\n\n  return config;\n};\n\n/** Ensure Podfile uses CocoaPods CDN and no stale local OpenIAP entry remains. */\nconst withIapIOS: ConfigPlugin = (config) => {\n  return withDangerousMod(config, [\n    'ios',\n    async (config) => {\n      const {platformProjectRoot} = config.modRequest;\n      const podfilePath = path.join(platformProjectRoot, 'Podfile');\n\n      if (!fs.existsSync(podfilePath)) {\n        return config;\n      }\n\n      let content = fs.readFileSync(podfilePath, 'utf8');\n\n      // 1) Ensure CocoaPods CDN source is present at the very top\n      const cdnLine = `source 'https://cdn.cocoapods.org/'`;\n      if (!content.includes(cdnLine)) {\n        content = `${cdnLine}\\n\\n${content}`;\n        logOnce('\ud83d\udce6 expo-iap: Added CocoaPods CDN source to Podfile');\n      }\n\n      // 2) Remove any lingering local OpenIAP pod injection\n      const localPodRegex =\n        /^\\s*pod\\s+'openiap'\\s*,\\s*:path\\s*=>\\s*['\"][^'\"]+['\"][^\\n]*$/gm;\n      if (localPodRegex.test(content)) {\n        content = content.replace(localPodRegex, '').replace(/\\n{3,}/g, '\\n\\n');\n        logOnce('\ud83e\uddf9 expo-iap: Removed local OpenIAP pod from Podfile');\n      }\n\n      fs.writeFileSync(podfilePath, content);\n      return config;\n    },\n  ]);\n};\n\nexport interface ExpoIapPluginOptions {\n  /** Local development path for OpenIAP library */\n  localPath?:\n    | string\n    | {\n        ios?: string;\n        android?: string;\n      };\n  /** Enable local development mode */\n  enableLocalDev?: boolean;\n}\n\nconst withIap: ConfigPlugin<ExpoIapPluginOptions | void> = (\n  config,\n  options,\n) => {\n  try {\n    // Respect explicit flag; fall back to presence of localPath only when flag is unset\n    const isLocalDev = options?.enableLocalDev ?? !!options?.localPath;\n    // Apply Android modifications (skip adding deps when linking local module)\n    let result = withIapAndroid(config, {addDeps: !isLocalDev});\n\n    // iOS: choose one path to avoid overlap\n    if (isLocalDev) {\n      if (!options?.localPath) {\n        WarningAggregator.addWarningIOS(\n          'expo-iap',\n          'enableLocalDev is true but no localPath provided. Skipping local OpenIAP integration.',\n        );\n      } else {\n        const raw = options.localPath;\n        const resolved =\n          typeof raw === 'string'\n            ? path.resolve(raw)\n            : {\n                ios: raw.ios ? path.resolve(raw.ios) : undefined,\n                android: raw.android ? path.resolve(raw.android) : undefined,\n              };\n\n        const preview =\n          typeof resolved === 'string'\n            ? resolved\n            : `ios=${resolved.ios ?? 'auto'}, android=${                resolved.android ?? 'auto'              }`;\n        logOnce(`\ud83d\udd27 [expo-iap] Enabling local OpenIAP: ${preview}`);\n        result = withLocalOpenIAP(result, {localPath: resolved});\n      }\n    } else {\n      // Ensure iOS Podfile is set up to resolve public CocoaPods specs\n      result = withIapIOS(result);\n      logOnce('\ud83d\udce6 [expo-iap] Using OpenIAP from CocoaPods');\n    }\n\n    return result;\n  } catch (error) {\n    WarningAggregator.addWarningAndroid(\n      'expo-iap',\n      `expo-iap plugin encountered an error: ${error}`,\n    );\n    console.error('expo-iap plugin error:', error);\n    return config;\n  }\n};\n\nexport default createRunOncePlugin(withIap, pkg.name, pkg.version);\n"})})]})]})}function p(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}},8453:(n,e,o)=>{o.d(e,{R:()=>a,x:()=>l});var i=o(6540);const s={},t=i.createContext(s);function a(n){const e=i.useContext(t);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:a(n.components),i.createElement(t.Provider,{value:e},n.children)}}}]);